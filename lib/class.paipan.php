<?php
/**
 * @author hkargc@139.com
 * 本日历及排盘类完全源于以下项目,本人仅作为代码搬运工,感谢项目作者的无私分享
 * 日历部分由bieyu.com搬运而来,其提供了详尽的历法转换原理,JS源码及部分PHP源码,项目地址: http://www.bieyu.com/
 * 真太阳时的转换由寿星万年历搬运而来,项目地址: http://www.nongli.net/sxwnl/
 */
class paipan{
    /**
     * 标准时间发出地经度,用于计算本地平太阳时
     */
    private $J = 120;
    /**
     * 标准时间所在时区TimeZone,北京时间为+8,表示比UT时间早8小时 -1 * (new Date()).getTimezoneOffset()/60
     */
    private $TZ = 8;
    /**
     * 均值朔望月長 synodic month (new Moon to new Moon)
     */
    private $synmonth = 29.530588853;
    /**
     * 四柱是否区分 早晚子 时,true则23:00-24:00算成上一天
     */
    public $zwz = true;
    /**
     * 是否输出错误信息
     */
    public $debug = true;
    /**
     * 星期 week day
     */
    public $wkd = ['日', '一', '二', '三', '四', '五', '六'];
    /**
     * 六十甲子
     */
    public $gz = [
        '甲子', '乙丑', '丙寅', '丁卯', '戊辰', '己巳', '庚午', '辛未', '壬申', '癸酉',
        '甲戌', '乙亥', '丙子', '丁丑', '戊寅', '己卯', '庚辰', '辛巳', '壬午', '癸未',
        '甲申', '乙酉', '丙戌', '丁亥', '戊子', '己丑', '庚寅', '辛卯', '壬辰', '癸巳',
        '甲午', '乙未', '丙申', '丁酉', '戊戌', '己亥', '庚子', '辛丑', '壬寅', '癸卯',
        '甲辰', '乙巳', '丙午', '丁未', '戊申', '己酉', '庚戌', '辛亥', '壬子', '癸丑',
        '甲寅', '乙卯', '丙辰', '丁巳', '戊午', '己未', '庚申', '辛酉', '壬戌', '癸亥'
    ];
    /**
     * 十天干 char of TianGan
     */
    public $ctg = ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'];
    /**
     * 十二地支 char of DiZhi
     */
    public $cdz = ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'];
    /**
     * 十二生肖 char of symbolic animals ShengXiao
     */
    public $csx = ['鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪'];
    /**
     * 廿四节气(从春分开始) JieQi
     */
    public $jq = ['春分', '清明', '谷雨', '立夏', '小满', '芒种', '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪', '冬至', '小寒', '大寒', '立春', '雨水', '惊蛰'];
    /**
     * 大写月份
     */
    public $dxy = ['正月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '冬月', '腊月'];
    /**
     * 大写日期
     */
    public $dxd = ['初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '廿十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十'];
    /**
     * 大写数字
     */
    public $dxs = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];
    /**
     * 五行 char of WuXing
     */
    public $cwx = ['金', '水', '木', '火', '土'];
    /**
     * 性别 XingBie
     */
    public $xb = ['男', '女'];
    /**
     * 命造 mingzao
     */
    public $mz = ['乾', '坤'];
    /**
     * 阴阳 char of YingYang
     */
    public $cyy = ['阳', '阴'];
    /**
     * 命局类型
     */
    public $lx = ['命旺', '印重', '煞重', '财旺', '伤官'];
    /**
     * 天干的五行屬性,01234分別代表:金水木火土
     */
    public $wxtg = [2, 2, 3, 3, 4, 4, 0, 0, 1, 1];
    /**
     * 地支的五行屬性,01234分別代表:金水木火土
     */
    public $wxdz = [1, 4, 2, 2, 4, 3, 3, 4, 0, 0, 4, 1];
    /**
     * 十神全称
     */
    public $ssq = ['正印', '偏印', '比肩', '劫財', '傷官', '食神', '正財', '偏財', '正官', '偏官'];
    /**
     * 十神缩写
     */
    public $sss = ['印', '卩', '比', '劫', '伤', '食', '财', '才', '官', '杀'];
    /**
     * 日干關聯其餘各干對應十神 Day Gan ShiShen
     */
    public $dgs = [
        [2, 3, 1, 0, 9, 8, 7, 6, 5, 4],
        [3, 2, 0, 1, 8, 9, 6, 7, 4, 5],
        [5, 4, 2, 3, 1, 0, 9, 8, 7, 6],
        [4, 5, 3, 2, 0, 1, 8, 9, 6, 7],
        [7, 6, 5, 4, 2, 3, 1, 0, 9, 8],
        [6, 7, 4, 5, 3, 2, 0, 1, 8, 9],
        [9, 8, 7, 6, 5, 4, 2, 3, 1, 0],
        [8, 9, 6, 7, 4, 5, 3, 2, 0, 1],
        [1, 0, 9, 8, 7, 6, 5, 4, 2, 3],
        [0, 1, 8, 9, 6, 7, 4, 5, 3, 2]
    ];
    /**
     * 日干關聯各支對應十神 Day Zhi ShiShen
     */
    public $dzs = [
        [0, 1, 8, 9, 6, 7, 4, 5, 3, 2],
        [6, 7, 4, 5, 3, 2, 0, 1, 8, 9],
        [2, 3, 1, 0, 9, 8, 7, 6, 5, 4],
        [3, 2, 0, 1, 8, 9, 6, 7, 4, 5],
        [7, 6, 5, 4, 2, 3, 1, 0, 9, 8],
        [5, 4, 2, 3, 1, 0, 9, 8, 7, 6],
        [4, 5, 3, 2, 0, 1, 8, 9, 6, 7],
        [6, 7, 4, 5, 3, 2, 0, 1, 8, 9],
        [9, 8, 7, 6, 5, 4, 2, 3, 1, 0],
        [8, 9, 6, 7, 4, 5, 3, 2, 0, 1],
        [7, 6, 5, 4, 2, 3, 1, 0, 9, 8],
        [1, 0, 9, 8, 7, 6, 5, 4, 2, 3]
    ];
    /**
     * 十二星座 char of XingZuo
     */
    public $cxz = ['摩羯', '水瓶', '双鱼', '白羊', '金牛', '双子', '巨蟹', '狮子', '处女', '天秤', '天蝎', '射手'];
    /**
     * 地支藏干表 支藏干
     */
    public $zcg = [
        [9, -1, -1],
        [5, 9, 7],
        [0, 2, 4],
        [1, -1, -1],
        [4, 1, 9],
        [2, 4, 6],
        [3, 5, -1],
        [5, 1, 3],
        [6, 8, 4],
        [7, -1, -1],
        [4, 7, 3],
        [8, 0, -1]
    ];
    /**
     * 十二长生 char of ZhangSheng
     */
    public $czs = ["長生(強)", "沐浴(凶)", "冠帶(吉)", "臨官(大吉)", "帝旺(大吉)", "衰(弱)", "病(弱)", "死(凶)", "墓(吉)", "絕(凶)", "胎(平)", "養(平)"];
    public $yyss = ['異', '同'];
    public $sxss = ['生我', '同我', '我生', '我克', '克我'];
    /**
     * 方位 char of FangWei
     */
    public $cfw = ["　中　", "　北　", "北北東", "東北東", "　東　", "東南東", "南南東", "　南　", "南南西", "西南西", "　西　", "西北西", "北北西"];
    /**
     * 四季 char of SiJi
     */
    public $csj = ["旺四季", "　春　", "　夏　", "　秋　", "　冬　"];
    /**
     * 天干的方位屬性 FangWei TianGan
     */
    public $fwtg = [4, 4, 7, 7, 0, 0, 10, 10, 1, 1];
    /**
     * 地支的方位屬性 FangWei DiZhi
     */
    public $fwdz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    /**
     * 天干的四季屬性 SiJi TianGan
     */
    public $sjtg = [1, 1, 2, 2, 0, 0, 3, 3, 4, 4];
    /**
     * 地支的四季屬性 SiJi DiZhi
     */
    public $sjdz = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 1];
    /**
     * 记录日志
     * @$string s
     */
    private function logs($n, $s=null) {
        $m = array();
        $m[0] = "超出計算能力";
        $m[1] = "適用於西元-1000年至西元3000年,超出此範圍誤差較大";
        $m[2] = "对应的干支不存在";
        $m[3] = "干支非六十甲子";
        $m[4] = "日期超出範圍";
        $m[5] = "日期錯誤";
        $m[6] = "月份錯誤";
        $m[7] = "此年非閏年";
        $m[8] = "此月非閏月";
        $m[9] = "不存在的时间";
        $m[10] = "参数非整数字符串";
        $m[11] = "参数非整数类型";
        $m[12] = "参数非浮点类型";
        $m[13] = "月份超出範圍";
        $m[14] = "此年無閏月";
        $m[15] = "参数非整数";
        $m[16] = "参数非数字";
        if ($this->debug) {
            $ss = $m[$n] ? $m[$n] : $n;
            $ss .= ($s === null) ? '' : (":" . $s);
            
            echo $ss;
        }
        return false;
    }
    /**
     * 对超过0-2PI的角度转为0-2PI
     */
    private function rad2mrad($v) {
        $v = fmod($v, (2 * M_PI));
        if ($v < 0) {
            return $v + 2 * M_PI;
        }
        return $v;
    }
    /**
     * 对超过-PI到PI的角度转为-PI到PI
     */
    private function rad2rrad($v) {
        $v = fmod($v, (2 * M_PI));
        if ($v <= -M_PI) {
            return $v + 2 * M_PI;
        }
        if ($v > M_PI) {
            return $v - 2 * M_PI;
        }
        return $v;
    }
    /**
     * 计算世界时与原子时之差,TD-UT(单位:秒)
     */
    private function dt_T($jd) {
        $y = ($jd - 2451545)/365.2425 + 2000; //公历年份,2451545为2000年1月1日12:00:00的jd值
        $dt_at = array( // TD - UT1 计算表
            -4000, 108371.7, -13036.80, 392.000, 0.0000,
            -500, 17201.0, -627.82, 16.170, -0.3413,
            -150, 12200.6, -346.41, 5.403, -0.1593,
            150, 9113.8, -328.13, -1.647, 0.0377,
            500, 5707.5, -391.41, 0.915, 0.3145,
            900, 2203.4, -283.45, 13.034, -0.1778,
            1300, 490.1, -57.35, 2.085, -0.0072,
            1600, 120.0, -9.81, -1.532, 0.1403,
            1700, 10.2, -0.91, 0.510, -0.0370,
            1800, 13.4, -0.72, 0.202, -0.0193,
            1830, 7.8, -1.81, 0.416, -0.0247,
            1860, 8.3, -0.13, -0.406, 0.0292,
            1880, -5.4, 0.32, -0.183, 0.0173,
            1900, -2.3, 2.06, 0.169, -0.0135,
            1920, 21.2, 1.69, -0.304, 0.0167,
            1940, 24.2, 1.22, -0.064, 0.0031,
            1960, 33.2, 0.51, 0.231, -0.0109,
            1980, 51.0, 1.29, -0.026, 0.0032,
            2000, 63.87, 0.1, 0, 0,
            2005, 64.7, 0.21, 0, 0,
            2012, 66.8, 0.22, 0, 0,
            2018, 69.0, 0.36, 0, 0,
            2028, 72.6
            );
        $y0 = $dt_at[count($dt_at) - 2]; //表中最后一年
        $t0 = $dt_at[count($dt_at) - 1]; //表中最后一年的deltatT
        if ($y >= $y0) {
            $jsd = 31; //sjd是y1年之后的加速度估计。瑞士星历表jsd=31,NASA网站jsd=32,skmap的jsd=29
            if ($y > $y0 + 100) {
                return (-20 + $jsd * pow(($y - 1820) / 100, 2));
            }
            $v = (-20 + $jsd * pow(($y - 1820) / 100, 2)); //二次曲线外推
            $dv = (-20 + $jsd * pow(($y0 - 1820) / 100, 2)) - $t0; //ye年的二次外推与te的差
            return $v - $dv * ($y0 + 100 - $y) / 100;
        }
        $d = $dt_at;
        for ($i = 0; $i < count($d); $i += 5) {
            if ($y < $d[$i + 5]) {
                break;
            }
        }
        $t1 = ($y - $d[$i]) / ($d[$i + 5] - $d[$i]) * 10;
        $t2 = $t1 * $t1;
        $t3 = $t2 * $t1;
        return $d[$i + 1] + $d[$i + 2] * $t1 + $d[$i + 3] * $t2 + $d[$i + 4] * $t3;
    }
    /**
     * XL:星历
     * @param float $t 儒略世纪数
     */
    private function XL_calc($t) {
        $t /= 10; //转为儒略千年数
        $n = 5; //n计算项数
        $v = 0;
        $tn = 1;
        $pn = 1;
        $F = array( //Dear精度:J2000+-4千年 黄经0.1角秒 黄纬0.1角秒 距离0.1AU/10^6
            10000000000, //A的倍率
            20, 578, 920, 1100, 1124, 1136, 1148, 1217, 1226, 1229, 1229, 1229, 1229, 1937, 2363, 2618, 2633, 2660, 2666, //位置索引表
            /*L0*/
            17534704567, 0.00000000000, 0.00000000000, 334165646, 4.669256804, 6283.075849991, 3489428, 4.6261024, 12566.1517000, 349706, 2.744118, 5753.384885, 341757, 2.828866, 3.523118, 313590, 3.627670, 77713.771468, 267622, 4.418084, 7860.419392, 234269, 6.135162, 3930.209696, 132429, 0.742464, 11506.769770, 127317, 2.037097, 529.690965, 119917, 1.109629, 1577.343542, 99025, 5.23268, 5884.92685, 90186, 2.04505, 26.29832, 85722, 3.50849, 398.14900, 77979, 1.17883, 5223.69392, 75314, 2.53339, 5507.55324, 50526, 4.58293, 18849.22755, 49238, 4.20507, 775.52261, 35666, 2.91954, 0.06731, 31709, 5.84902, 11790.62909, 28413, 1.89869, 796.29801, 27104, 0.31489, 10977.07880, 24281, 0.34481, 5486.77784, 20616, 4.80647, 2544.31442, 20539, 1.86948, 5573.14280, 20226, 2.45768, 6069.77675, 15552, 0.83306, 213.29910, 13221, 3.41118, 2942.46342, 12618, 1.08303, 20.77540, 11513, 0.64545, 0.98032, 10285, 0.63600, 4694.00295, 10190, 0.97569, 15720.83878, 10172, 4.26680, 7.11355, 9921, 6.2099, 2146.1654, 9761, 0.6810, 155.4204, 8580, 5.9832, 161000.6857, 8513, 1.2987, 6275.9623, 8471, 3.6708, 71430.6956, 7964, 1.8079, 17260.1547, 7876, 3.0370, 12036.4607, 7465, 1.7551, 5088.6288, 7387, 3.5032, 3154.6871, 7355, 4.6793, 801.8209, 6963, 0.8330, 9437.7629, 6245, 3.9776, 8827.3903, 6115, 1.8184, 7084.8968, 5696, 2.7843, 6286.5990, 5612, 4.3869, 14143.4952, 5558, 3.4701, 6279.5527, 5199, 0.1891, 12139.5535, 5161, 1.3328, 1748.0164, 5115, 0.2831, 5856.4777, 4900, 0.4874, 1194.4470, 4104, 5.3682, 8429.2413, 4094, 2.3985, 19651.0485, 3920, 6.1683, 10447.3878, 3677, 6.0413, 10213.2855, 3660, 2.5696, 1059.3819, 3595, 1.7088, 2352.8662, 3557, 1.7760, 6812.7668, 3329, 0.5931, 17789.8456, 3041, 0.4429, 83996.8473, 3005, 2.7398, 1349.8674, 2535, 3.1647, 4690.4798, 2474, 0.2148, 3.5904, 2366, 0.4847, 8031.0923, 2357, 2.0653, 3340.6124, 2282, 5.2220, 4705.7323, 2189, 5.5559, 553.5694, 2142, 1.4256, 16730.4637, 2109, 4.1483, 951.7184, 2030, 0.3713, 283.8593, 1992, 5.2221, 12168.0027, 1986, 5.7747, 6309.3742, 1912, 3.8222, 23581.2582, 1889, 5.3863, 149854.4001, 1790, 2.2149, 13367.9726, 1748, 4.5605, 135.0651, 1622, 5.9884, 11769.8537, 1508, 4.1957, 6256.7775, 1442, 4.1932, 242.7286, 1435, 3.7236, 38.0277, 1397, 4.4014, 6681.2249, 1362, 1.8893, 7632.9433, 1250, 1.1305, 5.5229, 1205, 2.6223, 955.5997, 1200, 1.0035, 632.7837, 1129, 0.1774, 4164.3120, 1083, 0.3273, 103.0928, 1052, 0.9387, 11926.2544, 1050, 5.3591, 1592.5960, 1033, 6.1998, 6438.4962, 1001, 6.0291, 5746.2713, 980, 0.999, 11371.705, 980, 5.244, 27511.468, 938, 2.624, 5760.498, 923, 0.483, 522.577, 922, 4.571, 4292.331, 905, 5.337, 6386.169, 862, 4.165, 7058.598, 841, 3.299, 7234.794, 836, 4.539, 25132.303, 813, 6.112, 4732.031, 812, 6.271, 426.598, 801, 5.821, 28.449, 787, 0.996, 5643.179, 776, 2.957, 23013.540, 769, 3.121, 7238.676, 758, 3.974, 11499.656, 735, 4.386, 316.392, 731, 0.607, 11513.883, 719, 3.998, 74.782, 706, 0.323, 263.084, 676, 5.911, 90955.552, 663, 3.665, 17298.182, 653, 5.791, 18073.705, 630, 4.717, 6836.645, 615, 1.458, 233141.314, 612, 1.075, 19804.827, 596, 3.321, 6283.009, 596, 2.876, 6283.143, 555, 2.452, 12352.853, 541, 5.392, 419.485, 531, 0.382, 31441.678, 519, 4.065, 6208.294, 513, 2.361, 10973.556, 494, 5.737, 9917.697, 450, 3.272, 11015.106, 449, 3.653, 206.186, 447, 2.064, 7079.374, 435, 4.423, 5216.580, 421, 1.906, 245.832, 413, 0.921, 3738.761, 402, 0.840, 20.355, 387, 1.826, 11856.219, 379, 2.344, 3.881, 374, 2.954, 3128.389, 370, 5.031, 536.805, 365, 1.018, 16200.773, 365, 1.083, 88860.057, 352, 5.978, 3894.182, 352, 2.056, 244287.600, 351, 3.713, 6290.189, 340, 1.106, 14712.317, 339, 0.978, 8635.942, 339, 3.202, 5120.601, 333, 0.837, 6496.375, 325, 3.479, 6133.513, 316, 5.089, 21228.392, 316, 1.328, 10873.986, 309, 3.646, 10.637, 303, 1.802, 35371.887, 296, 3.397, 9225.539, 288, 6.026, 154717.610, 281, 2.585, 14314.168, 262, 3.856, 266.607, 262, 2.579, 22483.849, 257, 1.561, 23543.231, 255, 3.949, 1990.745, 251, 3.744, 10575.407, 240, 1.161, 10984.192, 238, 0.106, 7.046, 236, 4.272, 6040.347, 234, 3.577, 10969.965, 211, 3.714, 65147.620, 210, 0.754, 13521.751, 207, 4.228, 5650.292, 202, 0.814, 170.673, 201, 4.629, 6037.244, 200, 0.381, 6172.870, 199, 3.933, 6206.810, 199, 5.197, 6262.300, 197, 1.046, 18209.330, 195, 1.070, 5230.807, 195, 4.869, 36.028, 194, 4.313, 6244.943, 192, 1.229, 709.933, 192, 5.595, 6282.096, 192, 0.602, 6284.056, 189, 3.744, 23.878, 188, 1.904, 15.252, 188, 0.867, 22003.915, 182, 3.681, 15110.466, 181, 0.491, 1.484, 179, 3.222, 39302.097, 179, 1.259, 12559.038,
            /*L1*/
            62833196674749, 0.000000000000, 0.000000000000, 20605886, 2.67823456, 6283.07584999, 430343, 2.635127, 12566.151700, 42526, 1.59047, 3.52312, 11926, 5.79557, 26.29832, 10898, 2.96618, 1577.34354, 9348, 2.5921, 18849.2275, 7212, 1.1385, 529.6910, 6777, 1.8747, 398.1490, 6733, 4.4092, 5507.5532, 5903, 2.8880, 5223.6939, 5598, 2.1747, 155.4204, 4541, 0.3980, 796.2980, 3637, 0.4662, 775.5226, 2896, 2.6471, 7.1135, 2084, 5.3414, 0.9803, 1910, 1.8463, 5486.7778, 1851, 4.9686, 213.2991, 1729, 2.9912, 6275.9623, 1623, 0.0322, 2544.3144, 1583, 1.4305, 2146.1654, 1462, 1.2053, 10977.0788, 1246, 2.8343, 1748.0164, 1188, 3.2580, 5088.6288, 1181, 5.2738, 1194.4470, 1151, 2.0750, 4694.0030, 1064, 0.7661, 553.5694, 997, 1.303, 6286.599, 972, 4.239, 1349.867, 945, 2.700, 242.729, 858, 5.645, 951.718, 758, 5.301, 2352.866, 639, 2.650, 9437.763, 610, 4.666, 4690.480, 583, 1.766, 1059.382, 531, 0.909, 3154.687, 522, 5.661, 71430.696, 520, 1.854, 801.821, 504, 1.425, 6438.496, 433, 0.241, 6812.767, 426, 0.774, 10447.388, 413, 5.240, 7084.897, 374, 2.001, 8031.092, 356, 2.429, 14143.495, 350, 4.800, 6279.553, 337, 0.888, 12036.461, 337, 3.862, 1592.596, 325, 3.400, 7632.943, 322, 0.616, 8429.241, 318, 3.188, 4705.732, 297, 6.070, 4292.331, 295, 1.431, 5746.271, 290, 2.325, 20.355, 275, 0.935, 5760.498, 270, 4.804, 7234.794, 253, 6.223, 6836.645, 228, 5.003, 17789.846, 225, 5.672, 11499.656, 215, 5.202, 11513.883, 208, 3.955, 10213.286, 208, 2.268, 522.577, 206, 2.224, 5856.478, 206, 2.550, 25132.303, 203, 0.910, 6256.778, 189, 0.532, 3340.612, 188, 4.735, 83996.847, 179, 1.474, 4164.312, 178, 3.025, 5.523, 177, 3.026, 5753.385, 159, 4.637, 3.286, 157, 6.124, 5216.580, 155, 3.077, 6681.225, 154, 4.200, 13367.973, 143, 1.191, 3894.182, 138, 3.093, 135.065, 136, 4.245, 426.598, 134, 5.765, 6040.347, 128, 3.085, 5643.179, 127, 2.092, 6290.189, 125, 3.077, 11926.254, 125, 3.445, 536.805, 114, 3.244, 12168.003, 112, 2.318, 16730.464, 111, 3.901, 11506.770, 111, 5.320, 23.878, 105, 3.750, 7860.419, 103, 2.447, 1990.745, 96, 0.82, 3.88, 96, 4.08, 6127.66, 91, 5.42, 206.19, 91, 0.42, 7079.37, 88, 5.17, 11790.63, 81, 0.34, 9917.70, 80, 3.89, 10973.56, 78, 2.40, 1589.07, 78, 2.58, 11371.70, 77, 3.98, 955.60, 77, 3.36, 36.03, 76, 1.30, 103.09, 75, 5.18, 10969.97, 75, 4.96, 6496.37, 73, 5.21, 38.03, 72, 2.65, 6309.37, 70, 5.61, 3738.76, 69, 2.60, 3496.03, 69, 0.39, 15.25, 69, 2.78, 20.78, 65, 1.13, 7058.60, 64, 4.28, 28.45, 61, 5.63, 10984.19, 60, 0.73, 419.48, 60, 5.28, 10575.41, 58, 5.55, 17298.18, 58, 3.19, 4732.03,
            /*L2*/
            5291887, 0.0000000, 0.0000000, 871984, 1.072097, 6283.075850, 30913, 0.86729, 12566.15170, 2734, 0.0530, 3.5231, 1633, 5.1883, 26.2983, 1575, 3.6846, 155.4204, 954, 0.757, 18849.228, 894, 2.057, 77713.771, 695, 0.827, 775.523, 506, 4.663, 1577.344, 406, 1.031, 7.114, 381, 3.441, 5573.143, 346, 5.141, 796.298, 317, 6.053, 5507.553, 302, 1.192, 242.729, 289, 6.117, 529.691, 271, 0.306, 398.149, 254, 2.280, 553.569, 237, 4.381, 5223.694, 208, 3.754, 0.980, 168, 0.902, 951.718, 153, 5.759, 1349.867, 145, 4.364, 1748.016, 134, 3.721, 1194.447, 125, 2.948, 6438.496, 122, 2.973, 2146.165, 110, 1.271, 161000.686, 104, 0.604, 3154.687, 100, 5.986, 6286.599, 92, 4.80, 5088.63, 89, 5.23, 7084.90, 83, 3.31, 213.30, 76, 3.42, 5486.78, 71, 6.19, 4690.48, 68, 3.43, 4694.00, 65, 1.60, 2544.31, 64, 1.98, 801.82, 61, 2.48, 10977.08, 50, 1.44, 6836.65, 49, 2.34, 1592.60, 46, 1.31, 4292.33, 46, 3.81, 149854.40, 43, 0.04, 7234.79, 40, 4.94, 7632.94, 39, 1.57, 71430.70, 38, 3.17, 6309.37, 35, 0.99, 6040.35, 35, 0.67, 1059.38, 31, 3.18, 2352.87, 31, 3.55, 8031.09, 30, 1.92, 10447.39, 30, 2.52, 6127.66, 28, 4.42, 9437.76, 28, 2.71, 3894.18, 27, 0.67, 25132.30, 26, 5.27, 6812.77, 25, 0.55, 6279.55, 23, 1.38, 4705.73, 22, 0.64, 6256.78, 20, 6.07, 640.88,
            /*L3*/
            28923, 5.84384, 6283.07585, 3496, 0.0000, 0.0000, 1682, 5.4877, 12566.1517, 296, 5.196, 155.420, 129, 4.722, 3.523, 71, 5.30, 18849.23, 64, 5.97, 242.73, 40, 3.79, 553.57,
            /*L4*/
            11408, 3.14159, 0.00000, 772, 4.134, 6283.076, 77, 3.84, 12566.15, 42, 0.42, 155.42,
            /*L5*/
            88, 3.14, 0.00, 17, 2.77, 6283.08, 5, 2.01, 155.42, 3, 2.21, 12566.15,
            /*B0*/
            27962, 3.19870, 84334.66158, 10164, 5.42249, 5507.55324, 8045, 3.8801, 5223.6939, 4381, 3.7044, 2352.8662, 3193, 4.0003, 1577.3435, 2272, 3.9847, 1047.7473, 1814, 4.9837, 6283.0758, 1639, 3.5646, 5856.4777, 1444, 3.7028, 9437.7629, 1430, 3.4112, 10213.2855, 1125, 4.8282, 14143.4952, 1090, 2.0857, 6812.7668, 1037, 4.0566, 71092.8814, 971, 3.473, 4694.003, 915, 1.142, 6620.890, 878, 4.440, 5753.385, 837, 4.993, 7084.897, 770, 5.554, 167621.576, 719, 3.602, 529.691, 692, 4.326, 6275.962, 558, 4.410, 7860.419, 529, 2.484, 4705.732, 521, 6.250, 18073.705,
            /*B1*/
            903, 3.897, 5507.553, 618, 1.730, 5223.694, 380, 5.244, 2352.866,
            /*B2*/
            166, 1.627, 84334.662,
            /*R0*/
            10001398880, 0.00000000000, 0.00000000000, 167069963, 3.098463508, 6283.075849991, 1395602, 3.0552461, 12566.1517000, 308372, 5.198467, 77713.771468, 162846, 1.173877, 5753.384885, 157557, 2.846852, 7860.419392, 92480, 5.45292, 11506.76977, 54244, 4.56409, 3930.20970, 47211, 3.66100, 5884.92685, 34598, 0.96369, 5507.55324, 32878, 5.89984, 5223.69392, 30678, 0.29867, 5573.14280, 24319, 4.27350, 11790.62909, 21183, 5.84715, 1577.34354, 18575, 5.02194, 10977.07880, 17484, 3.01194, 18849.22755, 10984, 5.05511, 5486.77784, 9832, 0.8868, 6069.7768, 8650, 5.6896, 15720.8388, 8583, 1.2708, 161000.6857, 6490, 0.2725, 17260.1547, 6292, 0.9218, 529.6910, 5706, 2.0137, 83996.8473, 5574, 5.2416, 71430.6956, 4938, 3.2450, 2544.3144, 4696, 2.5781, 775.5226, 4466, 5.5372, 9437.7629, 4252, 6.0111, 6275.9623, 3897, 5.3607, 4694.0030, 3825, 2.3926, 8827.3903, 3749, 0.8295, 19651.0485, 3696, 4.9011, 12139.5535, 3566, 1.6747, 12036.4607, 3454, 1.8427, 2942.4634, 3319, 0.2437, 7084.8968, 3192, 0.1837, 5088.6288, 3185, 1.7778, 398.1490, 2846, 1.2134, 6286.5990, 2779, 1.8993, 6279.5527, 2628, 4.5890, 10447.3878, 2460, 3.7866, 8429.2413, 2393, 4.9960, 5856.4777, 2359, 0.2687, 796.2980, 2329, 2.8078, 14143.4952, 2210, 1.9500, 3154.6871, 2035, 4.6527, 2146.1654, 1951, 5.3823, 2352.8662, 1883, 0.6731, 149854.4001, 1833, 2.2535, 23581.2582, 1796, 0.1987, 6812.7668, 1731, 6.1520, 16730.4637, 1717, 4.4332, 10213.2855, 1619, 5.2316, 17789.8456, 1381, 5.1896, 8031.0923, 1364, 3.6852, 4705.7323, 1314, 0.6529, 13367.9726, 1041, 4.3329, 11769.8537, 1017, 1.5939, 4690.4798, 998, 4.201, 6309.374, 966, 3.676, 27511.468, 874, 6.064, 1748.016, 779, 3.674, 12168.003, 771, 0.312, 7632.943, 756, 2.626, 6256.778, 746, 5.648, 11926.254, 693, 2.924, 6681.225, 680, 1.423, 23013.540, 674, 0.563, 3340.612, 663, 5.661, 11371.705, 659, 3.136, 801.821, 648, 2.650, 19804.827, 615, 3.029, 233141.314, 612, 5.134, 1194.447, 563, 4.341, 90955.552, 552, 2.091, 17298.182, 534, 5.100, 31441.678, 531, 2.407, 11499.656, 523, 4.624, 6438.496, 513, 5.324, 11513.883, 477, 0.256, 11856.219, 461, 1.722, 7234.794, 458, 3.766, 6386.169, 458, 4.466, 5746.271, 423, 1.055, 5760.498, 422, 1.557, 7238.676, 415, 2.599, 7058.598, 401, 3.030, 1059.382, 397, 1.201, 1349.867, 379, 4.907, 4164.312, 360, 5.707, 5643.179, 352, 3.626, 244287.600, 348, 0.761, 10973.556, 342, 3.001, 4292.331, 336, 4.546, 4732.031, 334, 3.138, 6836.645, 324, 4.164, 9917.697, 316, 1.691, 11015.106, 307, 0.238, 35371.887, 298, 1.306, 6283.143, 298, 1.750, 6283.009, 293, 5.738, 16200.773, 286, 5.928, 14712.317, 281, 3.515, 21228.392, 280, 5.663, 8635.942, 277, 0.513, 26.298, 268, 4.207, 18073.705, 266, 0.900, 12352.853, 260, 2.962, 25132.303, 255, 2.477, 6208.294, 242, 2.800, 709.933, 231, 1.054, 22483.849, 229, 1.070, 14314.168, 216, 1.314, 154717.610, 215, 6.038, 10873.986, 200, 0.561, 7079.374, 198, 2.614, 951.718, 197, 4.369, 167283.762, 186, 2.861, 5216.580, 183, 1.660, 39302.097, 183, 5.912, 3738.761, 175, 2.145, 6290.189, 173, 2.168, 10575.407, 171, 3.702, 1592.596, 171, 1.343, 3128.389, 164, 5.550, 6496.375, 164, 5.856, 10984.192, 161, 1.998, 10969.965, 161, 1.909, 6133.513, 157, 4.955, 25158.602, 154, 6.216, 23543.231, 153, 5.357, 13521.751, 150, 5.770, 18209.330, 150, 5.439, 155.420, 139, 1.778, 9225.539, 139, 1.626, 5120.601, 128, 2.460, 13916.019, 123, 0.717, 143571.324, 122, 2.654, 88860.057, 121, 4.414, 3894.182, 121, 1.192, 3.523, 120, 4.030, 553.569, 119, 1.513, 17654.781, 117, 3.117, 14945.316, 113, 2.698, 6040.347, 110, 3.085, 43232.307, 109, 0.998, 955.600, 108, 2.939, 17256.632, 107, 5.285, 65147.620, 103, 0.139, 11712.955, 103, 5.850, 213.299, 102, 3.046, 6037.244, 101, 2.842, 8662.240, 100, 3.626, 6262.300, 98, 2.36, 6206.81, 98, 5.11, 6172.87, 98, 2.00, 15110.47, 97, 2.67, 5650.29, 97, 2.75, 6244.94, 96, 4.02, 6282.10, 96, 5.31, 6284.06, 92, 0.10, 29088.81, 85, 3.26, 20426.57, 84, 2.60, 28766.92, 81, 3.58, 10177.26, 80, 5.81, 5230.81, 78, 2.53, 16496.36, 77, 4.06, 6127.66, 73, 0.04, 5481.25, 72, 5.96, 12559.04, 72, 5.92, 4136.91, 71, 5.49, 22003.91, 70, 3.41, 7.11, 69, 0.62, 11403.68, 69, 3.90, 1589.07, 69, 1.96, 12416.59, 69, 4.51, 426.60, 67, 1.61, 11087.29, 66, 4.50, 47162.52, 66, 5.08, 283.86, 66, 4.32, 16858.48, 65, 1.04, 6062.66, 64, 1.59, 18319.54, 63, 5.70, 45892.73, 63, 4.60, 66567.49, 63, 3.82, 13517.87, 62, 2.62, 11190.38, 61, 1.54, 33019.02, 60, 5.58, 10344.30, 60, 5.38, 316428.23, 60, 5.78, 632.78, 59, 6.12, 9623.69, 57, 0.16, 17267.27, 57, 3.86, 6076.89, 57, 1.98, 7668.64, 56, 4.78, 20199.09, 55, 4.56, 18875.53, 55, 3.51, 17253.04, 54, 3.07, 226858.24, 54, 4.83, 18422.63, 53, 5.02, 12132.44, 52, 3.63, 5333.90, 52, 0.97, 155427.54, 51, 3.36, 20597.24, 50, 0.99, 11609.86, 50, 2.21, 1990.75, 48, 1.62, 12146.67, 48, 1.17, 12569.67, 47, 4.62, 5436.99, 47, 1.81, 12562.63, 47, 0.59, 21954.16, 47, 0.76, 7342.46, 46, 0.27, 4590.91, 46, 3.77, 156137.48, 45, 5.66, 10454.50, 44, 5.84, 3496.03, 43, 0.24, 17996.03, 41, 5.93, 51092.73, 41, 4.21, 12592.45, 40, 5.14, 1551.05, 40, 5.28, 15671.08, 39, 3.69, 18052.93, 39, 4.94, 24356.78, 38, 2.72, 11933.37, 38, 5.23, 7477.52, 38, 4.99, 9779.11, 37, 3.70, 9388.01, 37, 4.44, 4535.06, 36, 2.16, 28237.23, 36, 2.54, 242.73, 36, 0.22, 5429.88, 35, 6.15, 19800.95, 35, 2.92, 36949.23, 34, 5.63, 2379.16, 34, 5.73, 16460.33, 34, 5.11, 5849.36, 33, 6.19, 6268.85,
            /*R1*/
            10301861, 1.10748970, 6283.07584999, 172124, 1.064423, 12566.151700, 70222, 3.14159, 0.00000, 3235, 1.0217, 18849.2275, 3080, 2.8435, 5507.5532, 2497, 1.3191, 5223.6939, 1849, 1.4243, 1577.3435, 1008, 5.9138, 10977.0788, 865, 1.420, 6275.962, 863, 0.271, 5486.778, 507, 1.686, 5088.629, 499, 6.014, 6286.599, 467, 5.987, 529.691, 440, 0.518, 4694.003, 410, 1.084, 9437.763, 387, 4.750, 2544.314, 375, 5.071, 796.298, 352, 0.023, 83996.847, 344, 0.949, 71430.696, 341, 5.412, 775.523, 322, 6.156, 2146.165, 286, 5.484, 10447.388, 284, 3.420, 2352.866, 255, 6.132, 6438.496, 252, 0.243, 398.149, 243, 3.092, 4690.480, 225, 3.689, 7084.897, 220, 4.952, 6812.767, 219, 0.420, 8031.092, 209, 1.282, 1748.016, 193, 5.314, 8429.241, 185, 1.820, 7632.943, 175, 3.229, 6279.553, 173, 1.537, 4705.732, 158, 4.097, 11499.656, 158, 5.539, 3154.687, 150, 3.633, 11513.883, 148, 3.222, 7234.794, 147, 3.653, 1194.447, 144, 0.817, 14143.495, 135, 6.151, 5746.271, 134, 4.644, 6836.645, 128, 2.693, 1349.867, 123, 5.650, 5760.498, 118, 2.577, 13367.973, 113, 3.357, 17789.846, 110, 4.497, 4292.331, 108, 5.828, 12036.461, 102, 5.621, 6256.778, 99, 1.14, 1059.38, 98, 0.66, 5856.48, 93, 2.32, 10213.29, 92, 0.77, 16730.46, 88, 1.50, 11926.25, 86, 1.42, 5753.38, 85, 0.66, 155.42, 81, 1.64, 6681.22, 80, 4.11, 951.72, 66, 4.55, 5216.58, 65, 0.98, 25132.30, 64, 4.19, 6040.35, 64, 0.52, 6290.19, 63, 1.51, 5643.18, 59, 6.18, 4164.31, 57, 2.30, 10973.56, 55, 2.32, 11506.77, 55, 2.20, 1592.60, 55, 5.27, 3340.61, 54, 5.54, 553.57, 53, 5.04, 9917.70, 53, 0.92, 11371.70, 52, 3.98, 17298.18, 52, 3.60, 10969.97, 49, 5.91, 3894.18, 49, 2.51, 6127.66, 48, 1.67, 12168.00, 46, 0.31, 801.82, 42, 3.70, 10575.41, 42, 4.05, 10984.19, 40, 2.17, 7860.42, 40, 4.17, 26.30, 38, 5.82, 7058.60, 37, 3.39, 6496.37, 36, 1.08, 6309.37, 36, 5.34, 7079.37, 34, 3.62, 11790.63, 32, 0.32, 16200.77, 31, 4.24, 3738.76, 29, 4.55, 11856.22, 29, 1.26, 8635.94, 27, 3.45, 5884.93, 26, 5.08, 10177.26, 26, 5.38, 21228.39, 24, 2.26, 11712.96, 24, 1.05, 242.73, 24, 5.59, 6069.78, 23, 3.63, 6284.06, 23, 1.64, 4732.03, 22, 3.46, 213.30, 21, 1.05, 3496.03, 21, 3.92, 13916.02, 21, 4.01, 5230.81, 20, 5.16, 12352.85, 20, 0.69, 1990.75, 19, 2.73, 6062.66, 19, 5.01, 11015.11, 18, 6.04, 6283.01, 18, 2.85, 7238.68, 18, 5.60, 6283.14, 18, 5.16, 17253.04, 18, 2.54, 14314.17, 17, 1.58, 7.11, 17, 0.98, 3930.21, 17, 4.75, 17267.27, 16, 2.19, 6076.89, 16, 2.19, 18073.70, 16, 6.12, 3.52, 16, 4.61, 9623.69, 16, 3.40, 16496.36, 15, 0.19, 9779.11, 15, 5.30, 13517.87, 15, 4.26, 3128.39, 15, 0.81, 709.93, 14, 0.50, 25158.60, 14, 4.38, 4136.91, 13, 0.98, 65147.62, 13, 3.31, 154717.61, 13, 2.11, 1589.07, 13, 1.92, 22483.85, 12, 6.03, 9225.54, 12, 1.53, 12559.04, 12, 5.82, 6282.10, 12, 5.61, 5642.20, 12, 2.38, 167283.76, 12, 0.39, 12132.44, 12, 3.98, 4686.89, 12, 5.81, 12569.67, 12, 0.56, 5849.36, 11, 0.45, 6172.87, 11, 5.80, 16858.48, 11, 6.22, 12146.67, 11, 2.27, 5429.88,
            /*R2*/
            435939, 5.784551, 6283.075850, 12363, 5.57935, 12566.15170, 1234, 3.1416, 0.0000, 879, 3.628, 77713.771, 569, 1.870, 5573.143, 330, 5.470, 18849.228, 147, 4.480, 5507.553, 110, 2.842, 161000.686, 101, 2.815, 5223.694, 85, 3.11, 1577.34, 65, 5.47, 775.52, 61, 1.38, 6438.50, 50, 4.42, 6286.60, 47, 3.66, 7084.90, 46, 5.39, 149854.40, 42, 0.90, 10977.08, 40, 3.20, 5088.63, 35, 1.81, 5486.78, 32, 5.35, 3154.69, 30, 3.52, 796.30, 29, 4.62, 4690.48, 28, 1.84, 4694.00, 27, 3.14, 71430.70, 27, 6.17, 6836.65, 26, 1.42, 2146.17, 25, 2.81, 1748.02, 24, 2.18, 155.42, 23, 4.76, 7234.79, 21, 3.38, 7632.94, 21, 0.22, 4705.73, 20, 4.22, 1349.87, 20, 2.01, 1194.45, 20, 4.58, 529.69, 19, 1.59, 6309.37, 18, 5.70, 6040.35, 18, 6.03, 4292.33, 17, 2.90, 9437.76, 17, 2.00, 8031.09, 17, 5.78, 83996.85, 16, 0.05, 2544.31, 15, 0.95, 6127.66, 14, 0.36, 10447.39, 14, 1.48, 2352.87, 13, 0.77, 553.57, 13, 5.48, 951.72, 13, 5.27, 6279.55, 13, 3.76, 6812.77, 11, 5.41, 6256.78, 10, 0.68, 1592.60, 10, 4.95, 398.15, 10, 1.15, 3894.18, 10, 5.20, 244287.60, 10, 1.94, 11856.22, 9, 5.39, 25132.30, 8, 6.18, 1059.38, 8, 0.69, 8429.24, 8, 5.85, 242.73, 7, 5.26, 14143.50, 7, 0.52, 801.82, 6, 2.24, 8635.94, 6, 4.00, 13367.97, 6, 2.77, 90955.55, 6, 5.17, 7058.60, 5, 1.46, 233141.31, 5, 4.13, 7860.42, 5, 3.91, 26.30, 5, 3.89, 12036.46, 5, 5.58, 6290.19, 5, 5.54, 1990.75, 5, 0.83, 11506.77, 5, 6.22, 6681.22, 4, 5.26, 10575.41, 4, 1.91, 7477.52, 4, 0.43, 10213.29, 4, 1.09, 709.93, 4, 5.09, 11015.11, 4, 4.22, 88860.06, 4, 3.57, 7079.37, 4, 1.98, 6284.06, 4, 3.93, 10973.56, 4, 6.18, 9917.70, 4, 0.36, 10177.26, 4, 2.75, 3738.76, 4, 3.33, 5643.18, 4, 5.36, 25158.60,
            /*R3*/
            14459, 4.27319, 6283.07585, 673, 3.917, 12566.152, 77, 0.00, 0.00, 25, 3.73, 18849.23, 4, 2.80, 6286.60,
            /*R4*/
            386, 2.564, 6283.076, 31, 2.27, 12566.15, 5, 3.44, 5573.14, 2, 2.05, 18849.23, 1, 2.06, 77713.77, 1, 4.41, 161000.69, 1, 3.82, 149854.40, 1, 4.08, 6127.66, 1, 5.26, 6438.50,
            /*R5*/
            9, 1.22, 6283.08, 1, 0.66, 12566.15
        );
        
        $N0 = $F[$pn + 1] - $F[$pn]; //N0序列总数
        for ($i = 0; $i < 6; $i++, $tn *= $t) {
            $n1 = $F[$pn + $i];
            $n2 = $F[$pn + 1 + $i];
            $n0 = $n2 - $n1;
            if (!$n0){
                continue;
            }
            $N = floor(3 * $n * $n0 / $N0 + 0.5) + $n1;
            if ($i){
                $N += 3;
            }
            if ($N > $n2){
                $N = $n2;
            }
            for ($j = $n1, $c = 0; $j < $N; $j += 3){
                $c += $F[$j] * cos($F[$j + 1] + $t * $F[$j + 2]);
            }
            $v += $c * $tn;
        }
        $v /= $F[0];
        $t2 = $t * $t;
        $t3 = $t2 * $t; //千年数的各次方
        return $v + (-0.0728 - 2.7702 * $t - 1.1019 * $t2 - 0.0996 * $t3) / (180 * 3600 / M_PI);
    }
    /**
     * 根据标准时间计算真太阳时,采用低精度算法计算时差,误差约在1秒以内
     * @param float $jd 标准时间jd值
     * @param float $j 经度(角度表示),东经120度25分为: 120 + 25/60;
     */
    public function zty($jd, $j) { //时差计算(低精度),误差约在1秒以内
        $jd = $jd - $this->TZ / 24; //转为格林尼治UT时间
        $jd2 = $jd - 2451545 + $this->dt_T($jd) / 86400; //力学时
        $t = $jd2 / 36525; //力学时儒略世纪数
        
        $L = (1753470142 + 628331965331.8 * $t + 5296.74 * $t * $t) / 1000000000 + M_PI;
        $z = array();
        $E = (84381.4088 - 46.836051 * $t) / (180 * 3600 / M_PI);
        $z[0] = $this->XL_calc($t) + M_PI;
        $z[1] = 0; //地球坐标
        
        $r = array(); //球面坐标旋转,黄道赤道坐标变换,赤到黄E取负
        $r[0] = atan2(sin($z[0]) * cos($E) - tan($z[1]) * sin($E), cos($z[0]));
        $r[1] = asin(cos($E) * sin($z[1]) + sin($E) * cos($z[1]) * sin($z[0]));
        $r[0] = $this->rad2mrad($r[0]);
        
        $L = $this->rad2rrad($L - $r[0]);
        $d = $L / M_PI / 2; //单位是周(天)
        
        return $jd + $d + floatval($j) / 360;
    }
    /**
     * 將公历年月日時轉换爲儒略日历时间
     * @param int $yy
     * @param int $mm
     * @param int $dd
     * @param int $hh
     * @param int $mt
     * @param int $ss
     * @return false|number
     */
    public function Jdays($yy, $mm, $dd, $hh, $mt = 0, $ss = 0) {
        $yy = floatval($yy);
        $mm = floatval($mm);
        $dd = floatval($dd);
        $hh = floatval($hh);
        $mt = floatval($mt);
        $ss = floatval($ss);
        if ($yy < -7000 || $yy > 7000) { //超出計算能力
            $this->logs(0);
            return false;
        }
        $yp = $yy + floor(($mm - 3) / 10);
        if (($yy > 1582) || ($yy == 1582 && $mm > 10) || ($yy == 1582 && $mm == 10 && $dd >= 15)) {
            $init = 1721119.5;
            $jdy = floor($yp * 365.25) - floor($yp / 100) + floor($yp / 400);
        } else {
            if (($yy < 1582) || ($yy == 1582 && $mm < 10) || ($yy == 1582 && $mm == 10 && $dd <= 4)) {
                $init = 1721117.5;
                $jdy = floor($yp * 365.25);
            } else { //不存在的时间
                $this->logs(9);
                return false;
            }
        }
        $mp = floor($mm + 9) % 12;
        $jdm = $mp * 30 + floor(($mp + 1) * 34 / 57);
        $jdd = $dd - 1;
        $hh = $hh + (($ss / 60) + $mt) / 60;
        $jdh = $hh / 24;
        $jd = $jdy + $jdm + $jdd + $jdh + $init;
        return $jd;
    }
    /**
     * 將儒略日轉换爲公历(即陽曆或格里曆)年月日時分秒
     * @param float $jd
     * @return array(年,月,日,时,分,秒)
     */
    public function Jtime($jd) {
        $jd = floatval($jd);
        if ($jd >= 2299160.5) { //以1582年的10月15日0時(JD值2299160.5)為分界點,在這之前為儒略曆,之後為格里曆
            $y4h = 146097;
            $init = 1721119.5;
        } else {
            $y4h = 146100;
            $init = 1721117.5;
        }
        $jdr = floor($jd - $init);
        $yh = $y4h / 4;
        $cen = floor(($jdr + 0.75) / $yh);
        $d = floor($jdr + 0.75 - $cen * $yh);
        $ywl = 1461 / 4;
        $jy = floor(($d + 0.75) / $ywl);
        $d = floor($d + 0.75 - $ywl * $jy + 1);
        $ml = 153 / 5;
        $mp = floor(($d - 0.5) / $ml);
        $d = floor(($d - 0.5) - 30.6 * $mp + 1);
        $y = (100 * $cen) + $jy;
        $m = ($mp + 2) % 12 + 1;
        if ($m < 3) {
            $y = $y + 1;
        }
        $sd = floor(($jd + 0.5 - floor($jd + 0.5)) * 24 * 60 * 60 + 0.00005);
        $mt = floor($sd / 60);
        $ss = $sd % 60;
        $hh = floor($mt / 60);
        $mmt = $mt % 60;
        $yy = floor($y);
        $mm = floor($m);
        $dd = floor($d);
        
        return array($yy, $mm, $dd, $hh, $mmt, $ss);
    }
    /**
     * 驗證公历日期是否有效
     * @param int $yy
     * @param int $mm
     * @param int $dd
     * @return boolean
     */
    public function ValidDate($yy, $mm, $dd) {
        $vd = true;
        if ($mm <= 0 || $mm > 12) { //月份超出範圍
            $this->logs(13);
            $vd = false;
        } else {
            $ndf1 = -($yy % 4 == 0); //可被四整除
            $ndf2 = (($yy % 400 == 0) - ($yy % 100 == 0)) && ($yy > 1582);
            $ndf = $ndf1 + $ndf2;
            $dom = 30 + ((abs($mm - 7.5) + 0.5) % 2) - ($mm == 2) * (2 + $ndf);
            if ($dd <= 0 || $dd > $dom) {
                if ($ndf == 0 && $mm == 2 && $dd == 29) { //此年無閏月
                    $this->logs(14);
                } else { //日期超出範圍
                    $this->logs(4);
                }
                $vd = false;
            }
        }
        if ($yy == 1582 && $mm == 10 && $dd >= 5 && $dd < 15) { //此日期不存在
            $this->logs(9);
            $vd = false;
        }
        return $vd;
    }
    /**
     * 计算指定年(公历)的春分点(vernal equinox)理论值
     * 因地球在繞日运行時會因受到其他星球之影響而產生攝動(perturbation),必須將此現象產生的偏移量加入.
     * @param int $yy
     * @return false|number 返回儒略日历时间
     */
    private function VE($yy) {
        $yx = intval($yy);
        if ($yx >= 1000 && $yx <= 8001) {
            $m = ($yx - 2000) / 1000;
            $jdve = 2451623.80984 + 365242.37404 * $m + 0.05169 * $m * $m - 0.00411 * $m * $m * $m - 0.00057 * $m * $m * $m * $m;
        } else {
            if ($yx >= -8000 && $yx < 1000) {
                $m = $yx / 1000;
                $jdve = 1721139.29189 + 365242.1374 * $m + 0.06134 * $m * $m + 0.00111 * $m * $m * $m - 0.00071 * $m * $m * $m * $m;
            } else { //超出计算能力范围
                $this->logs(0);
                return false;
            }
        }
        return $jdve;
    }
    /**
     * 获取指定公历年的春分开始的24节气理论值
     * 大致原理是:把公转轨道进行24等分,每一等分为一个节气,此为理论值,再用摄动值(Perturbation)和固定参数DeltaT做调整得到实际值
     * @param int $yy
     * @param int $ini 从0开始
     * @param int $num 1-24,若超过则有几秒的误差
     * @return array 下标从ini+1开始的数组
     */
    private function MeanJQJD($yy, $ini, $num) {
        $yy = intval($yy);
        $ini = intval($ini);
        $num = intval($num);
        
        $jdez = array();
        $jdve = $this->VE($yy);
        $ty = $this->VE($yy + 1) - $jdve; //求指定年的春分點及回歸年長
        
        $ath = 2 * M_PI / 24;
        $tx = ($jdve - 2451545) / 365250;
        $e = 0.0167086342 - 0.0004203654 * $tx - 0.0000126734 * $tx * $tx + 0.0000001444 * $tx * $tx * $tx - 0.0000000002 * $tx * $tx * $tx * $tx + 0.0000000003 * $tx * $tx * $tx * $tx * $tx;
        $tt = $yy / 1000;
        $vp = 111.25586939 - 17.0119934518333 * $tt - 0.044091890166673 * $tt * $tt - 4.37356166661345E-04 * $tt * $tt * $tt + 8.16716666602386E-06 * $tt * $tt * $tt * $tt;
        $rvp = $vp * 2 * M_PI / 360;
        $peri = array();
        for ($i = 1; $i <= ($ini + $num); $i++) {
            $flag = 0;
            $th = $ath * ($i - 1) + $rvp;
            if ($th > M_PI && $th <= 3 * M_PI) {
                $th = 2 * M_PI - $th;
                $flag = 1;
            }
            if ($th > 3 * M_PI) {
                $th = 4 * M_PI - $th;
                $flag = 2;
            }
            $f1 = 2 * atan((sqrt((1 - $e) / (1 + $e)) * tan($th / 2)));
            $f2 = ($e * sqrt(1 - $e * $e) * sin($th)) / (1 + $e * cos($th));
            $f = ($f1 - $f2) * $ty / 2 / M_PI;
            if ($flag == 1) {
                $f = $ty - $f;
            }
            if ($flag == 2) {
                $f = 2 * $ty - $f;
            }
            $peri[$i] = $f;
        }
        for ($i = ($ini + 1); $i <= ($ini + $num); $i++) {
            $jdez[$i] = $jdve + $peri[$i] - $peri[1];
        }
        return $jdez;
    }
    /**
     * 地球在繞日运行時會因受到其他星球之影響而產生攝動(perturbation)
     * @param float $jdez Julian day
     * @return number 返回某时刻(儒略日历)的攝動偏移量
     */
    private function Perturbation($jdez) {
        $jdez = floatval($jdez);
        $ptsa = [485, 203, 199, 182, 156, 136, 77, 74, 70, 58, 52, 50, 45, 44, 29, 18, 17, 16, 14, 12, 12, 12, 9, 8];
        $ptsb = [324.96, 337.23, 342.08, 27.85, 73.14, 171.52, 222.54, 296.72, 243.58, 119.81, 297.17, 21.02, 247.54, 325.15, 60.93, 155.12, 288.79, 198.04, 199.76, 95.39, 287.11, 320.81, 227.73, 15.45];
        $ptsc = [1934.136, 32964.467, 20.186, 445267.112, 45036.886, 22518.443, 65928.934, 3034.906, 9037.513, 33718.147, 150.678, 2281.226, 29929.562, 31555.956, 4443.417, 67555.328, 4562.452, 62894.029, 31436.921, 14577.848, 31931.756, 34777.259, 1222.114, 16859.074];
        $t = ($jdez - 2451545) / 36525;
        $s = 0;
        for ($k = 0; $k <= 23; $k++) {
            $s = $s + $ptsa[$k] * cos($ptsb[$k] * 2 * M_PI / 360 + $ptsc[$k] * 2 * M_PI / 360 * $t);
        }
        $w = 35999.373 * $t - 2.47;
        $l = 1 + 0.0334 * cos($w * 2 * M_PI / 360) + 0.0007 * cos(2 * $w * 2 * M_PI / 360);
        return 0.00001 * $s / $l;
    }
    /**
     * 求∆t
     * @param int $yy 公历年份
     * @param int $mm 公历月份
     * @return number 单位为分钟
     */
    private function DeltaT($yy, $mm) {
        $yy = intval($yy);
        $mm = intval($mm);
        
        $y = $yy + ($mm - 0.5) / 12;
        if ($y <= -500) {
            $u = ($y - 1820) / 100;
            $dt = (-20 + 32 * $u * $u);
        } else {
            if ($y < 500) {
                $u = $y / 100;
                $dt = (10583.6 - 1014.41 * $u + 33.78311 * $u * $u - 5.952053 * $u * $u * $u - 0.1798452 * $u * $u * $u * $u + 0.022174192 * $u * $u * $u * $u * $u + 0.0090316521 * $u * $u * $u * $u * $u * $u);
            } else {
                if ($y < 1600) {
                    $u = ($y - 1000) / 100;
                    $dt = (1574.2 - 556.01 * $u + 71.23472 * $u * $u + 0.319781 * $u * $u * $u - 0.8503463 * $u * $u * $u * $u - 0.005050998 * $u * $u * $u * $u * $u + 0.0083572073 * $u * $u * $u * $u * $u * $u);
                } else {
                    if ($y < 1700) {
                        $t = $y - 1600;
                        $dt = (120 - 0.9808 * $t - 0.01532 * $t * $t + $t * $t * $t / 7129);
                    } else {
                        if ($y < 1800) {
                            $t = $y - 1700;
                            $dt = (8.83 + 0.1603 * $t - 0.0059285 * $t * $t + 0.00013336 * $t * $t * $t - $t * $t * $t * $t / 1174000);
                        } else {
                            if ($y < 1860) {
                                $t = $y - 1800;
                                $dt = (13.72 - 0.332447 * $t + 0.0068612 * $t * $t + 0.0041116 * $t * $t * $t - 0.00037436 * $t * $t * $t * $t + 0.0000121272 * $t * $t * $t * $t * $t - 0.0000001699 * $t * $t * $t * $t * $t * $t + 0.000000000875 * $t * $t * $t * $t * $t * $t * $t);
                            } else {
                                if ($y < 1900) {
                                    $t = $y - 1860;
                                    $dt = (7.62 + 0.5737 * $t - 0.251754 * $t * $t + 0.01680668 * $t * $t * $t - 0.0004473624 * $t * $t * $t * $t + $t * $t * $t * $t * $t / 233174);
                                } else {
                                    if ($y < 1920) {
                                        $t = $y - 1900;
                                        $dt = (-2.79 + 1.494119 * $t - 0.0598939 * $t * $t + 0.0061966 * $t * $t * $t - 0.000197 * $t * $t * $t * $t);
                                    } else {
                                        if ($y < 1941) {
                                            $t = $y - 1920;
                                            $dt = (21.2 + 0.84493 * $t - 0.0761 * $t * $t + 0.0020936 * $t * $t * $t);
                                        } else {
                                            if ($y < 1961) {
                                                $t = $y - 1950;
                                                $dt = (29.07 + 0.407 * $t - $t * $t / 233 + $t * $t * $t / 2547);
                                            } else {
                                                if ($y < 1986) {
                                                    $t = $y - 1975;
                                                    $dt = (45.45 + 1.067 * $t - $t * $t / 260 - $t * $t * $t / 718);
                                                } else {
                                                    if ($y < 2005) {
                                                        $t = $y - 2000;
                                                        $dt = (63.86 + 0.3345 * $t - 0.060374 * $t * $t + 0.0017275 * $t * $t * $t + 0.000651814 * $t * $t * $t * $t + 0.00002373599 * $t * $t * $t * $t * $t);
                                                    } else {
                                                        if ($y < 2050) {
                                                            $t = $y - 2000;
                                                            $dt = (62.92 + 0.32217 * $t + 0.005589 * $t * $t);
                                                        } else {
                                                            if ($y < 2150) {
                                                                $u = ($y - 1820) / 100;
                                                                $dt = (-20 + 32 * $u * $u - 0.5628 * (2150 - $y));
                                                            } else {
                                                                $u = ($y - 1820) / 100;
                                                                $dt = (-20 + 32 * $u * $u);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if ($y < 1955 || $y >= 2005) {
            $dt = $dt - (0.000012932 * ($y - 1955) * ($y - 1955));
        }
        return $dt / 60; //將秒轉換為分
    }
    /**
     * 获取指定公历年對Perturbaton作調整後的自春分點開始的24節氣,可只取部份
     * @param int $yy
     * @param int $ini 0-23
     * @param int $num 1-24 取的个数
     * @return array $this->jq[(i-1)%24] 注意下标从ini+1开始
     */
    public function GetAdjustedJQ($yy, $ini, $num) {
        $yy = intval($yy);
        $ini = intval($ini);
        $num = intval($num);
        
        $jdjq = array();
        $jdez = $this->MeanJQJD($yy, $ini, $num); //輸入指定年,求該回歸年各節氣点
        for ($i = ($ini + 1); $i <= ($ini + $num); $i++) {
            $ptb = $this->Perturbation($jdez[$i]); //取得受perturbation影響所需微調
            $dt = $this->DeltaT($yy, floor($i / 2) + 3); //修正dynamical time to Universal time
            $jdjq[$i] = $jdez[$i] + $ptb - $dt / 60 / 24; //加上攝動調整值ptb，減去對應的Delta T值(分鐘轉換為日)
            $jdjq[$i] = $jdjq[$i] + $this->TZ / 24; //因中國時間比格林威治時間先行8小時，即1/3日
        }
        
        return $jdjq;
    }
    /**
     * 求出自冬至點為起點的連續16個中氣
     * @param int $yy
     * @return array $this->jq[(2*i+18)%24]
     */
    private function GetZQsinceWinterSolstice($yy) {
        $yy = intval($yy);
        
        $jdzq = array();
        
        //求出以冬至為起點之連續16個中氣（多取四個以備用）
        $dj = array();
        $dj = $this->GetAdjustedJQ($yy - 1, 18, 5); //求出指定年冬至開始之節氣JD值,以前一年的值代入
        //轉移春分前之節氣至jdzq變數中，以重整index
        $jdzq[0] = $dj[19]; //此為冬至中氣
        $jdzq[1] = $dj[21]; //此為大寒中氣
        $jdzq[2] = $dj[23]; //此為雨水中氣
        $dj = $this->GetAdjustedJQ($yy, 0, 26); //求出指定年節氣之JD值
        for ($i = 1; $i <= 13; $i++) {
            $jdzq[$i + 2] = $dj[2 * $i - 1]; //轉移冬至後之節氣至jdzq變數中，以重整index
        }
        return $jdzq;
    }
    /**
     * 求出某公历年以立春點開始的不含中氣之12節
     * @param int $yy
     * @return array $this->jq[(2*i+21)%24]
     */
    private function GetPureJQsinceSpring($yy) {
        $yy = intval($yy);
        
        $jdpjq = array();
        $sjdjq = array();
        $yea = $yy - 1;
        $sjdjq = $this->GetAdjustedJQ($yea, 21, 3); //求出含指定年立春開始之3個節氣JD值,以前一年的年值代入
        //轉移春分前之立春至驚蟄之節氣至jdpjq變數中，以重整index
        $jdpjq[0] = $sjdjq[22]; //此為立春
        $jdpjq[1] = $sjdjq[24]; //此為驚蟄
        $yea = $yy;
        $sjdjq = $this->GetAdjustedJQ($yea, 0, 26); //求出指定年節氣之JD值,從驚蟄開始，到雨水
        //轉移春分至小寒之節氣至jdpjq變數中，以重整index
        for ($i = 1; $i <= 13; $i++) {
            $jdpjq[$i + 1] = $sjdjq[2 * $i];
        }
        return $jdpjq;
    }
    /**
     * 對於指定日期時刻所屬的朔望月,求出其均值新月點的月序數
     * @param float $jd
     * @return int
     */
    private function MeanNewMoon($jd) {
        $jd = floatval($jd);
        
        //k為從2000年1月6日14時20分36秒起至指定年月日之陰曆月數,以synodic month為單位
        $k = floor(($jd - 2451550.09765) / $this->synmonth); //2451550.09765為2000年1月6日14時20分36秒之JD值。
        $jdt = 2451550.09765 + $k * $this->synmonth;
        //Time in Julian centuries from 2000 January 0.5.
        $t = ($jdt - 2451545) / 36525; //以100年為單位,以2000年1月1日12時為0點
        $thejd = $jdt + 0.0001337 * $t * $t - 0.00000015 * $t * $t * $t + 0.00000000073 * $t * $t * $t * $t;
        //2451550.09765為2000年1月6日14時20分36秒，此為2000年後的第一個均值新月
        return $k;
    }
    /**
     * 求出實際新月點
     * 以2000年初的第一個均值新月點為0點求出的均值新月點和其朔望月之序數k代入此副程式來求算實際新月點
     * @param int $k
     * @return number
     */
    private function TrueNewMoon($k) {
        $k = intval($k);
        
        $jdt = 2451550.09765 + $k * $this->synmonth;
        $t = ($jdt - 2451545) / 36525; //2451545為2000年1月1日正午12時的JD
        $t2 = $t * $t; //square for frequent use
        $t3 = $t2 * $t; //cube for frequent use
        $t4 = $t3 * $t; //to the fourth
        //mean time of phase
        $pt = $jdt + 0.0001337 * $t2 - 0.00000015 * $t3 + 0.00000000073 * $t4;
        //Sun's mean anomaly(地球繞太陽運行均值近點角)(從太陽觀察)
        $m = 2.5534 + 29.10535669 * $k - 0.0000218 * $t2 - 0.00000011 * $t3;
        //Moon's mean anomaly(月球繞地球運行均值近點角)(從地球觀察)
        $mprime = 201.5643 + 385.81693528 * $k + 0.0107438 * $t2 + 0.00001239 * $t3 - 0.000000058 * $t4;
        //Moon's argument of latitude(月球的緯度參數)
        $f = 160.7108 + 390.67050274 * $k - 0.0016341 * $t2 - 0.00000227 * $t3 + 0.000000011 * $t4;
        //Longitude of the ascending node of the lunar orbit(月球繞日運行軌道升交點之經度)
        $omega = 124.7746 - 1.5637558 * $k + 0.0020691 * $t2 + 0.00000215 * $t3;
        //乘式因子
        $es = 1 - 0.002516 * $t - 0.0000074 * $t2;
        //因perturbation造成的偏移：
        $apt1 = -0.4072 * sin((M_PI / 180) * $mprime);
        $apt1 += 0.17241 * $es * sin((M_PI / 180) * $m);
        $apt1 += 0.01608 * sin((M_PI / 180) * 2 * $mprime);
        $apt1 += 0.01039 * sin((M_PI / 180) * 2 * $f);
        $apt1 += 0.00739 * $es * sin((M_PI / 180) * ($mprime - $m));
        $apt1 -= 0.00514 * $es * sin((M_PI / 180) * ($mprime + $m));
        $apt1 += 0.00208 * $es * $es * sin((M_PI / 180) * (2 * $m));
        $apt1 -= 0.00111 * sin((M_PI / 180) * ($mprime - 2 * $f));
        $apt1 -= 0.00057 * sin((M_PI / 180) * ($mprime + 2 * $f));
        $apt1 += 0.00056 * $es * sin((M_PI / 180) * (2 * $mprime + $m));
        $apt1 -= 0.00042 * sin((M_PI / 180) * 3 * $mprime);
        $apt1 += 0.00042 * $es * sin((M_PI / 180) * ($m + 2 * $f));
        $apt1 += 0.00038 * $es * sin((M_PI / 180) * ($m - 2 * $f));
        $apt1 -= 0.00024 * $es * sin((M_PI / 180) * (2 * $mprime - $m));
        $apt1 -= 0.00017 * sin((M_PI / 180) * $omega);
        $apt1 -= 0.00007 * sin((M_PI / 180) * ($mprime + 2 * $m));
        $apt1 += 0.00004 * sin((M_PI / 180) * (2 * $mprime - 2 * $f));
        $apt1 += 0.00004 * sin((M_PI / 180) * (3 * $m));
        $apt1 += 0.00003 * sin((M_PI / 180) * ($mprime + $m - 2 * $f));
        $apt1 += 0.00003 * sin((M_PI / 180) * (2 * $mprime + 2 * $f));
        $apt1 -= 0.00003 * sin((M_PI / 180) * ($mprime + $m + 2 * $f));
        $apt1 += 0.00003 * sin((M_PI / 180) * ($mprime - $m + 2 * $f));
        $apt1 -= 0.00002 * sin((M_PI / 180) * ($mprime - $m - 2 * $f));
        $apt1 -= 0.00002 * sin((M_PI / 180) * (3 * $mprime + $m));
        $apt1 += 0.00002 * sin((M_PI / 180) * (4 * $mprime));
        $apt2 = 0.000325 * sin((M_PI / 180) * (299.77 + 0.107408 * $k - 0.009173 * $t2));
        $apt2 += 0.000165 * sin((M_PI / 180) * (251.88 + 0.016321 * $k));
        $apt2 += 0.000164 * sin((M_PI / 180) * (251.83 + 26.651886 * $k));
        $apt2 += 0.000126 * sin((M_PI / 180) * (349.42 + 36.412478 * $k));
        $apt2 += 0.00011 * sin((M_PI / 180) * (84.66 + 18.206239 * $k));
        $apt2 += 0.000062 * sin((M_PI / 180) * (141.74 + 53.303771 * $k));
        $apt2 += 0.00006 * sin((M_PI / 180) * (207.14 + 2.453732 * $k));
        $apt2 += 0.000056 * sin((M_PI / 180) * (154.84 + 7.30686 * $k));
        $apt2 += 0.000047 * sin((M_PI / 180) * (34.52 + 27.261239 * $k));
        $apt2 += 0.000042 * sin((M_PI / 180) * (207.19 + 0.121824 * $k));
        $apt2 += 0.00004 * sin((M_PI / 180) * (291.34 + 1.844379 * $k));
        $apt2 += 0.000037 * sin((M_PI / 180) * (161.72 + 24.198154 * $k));
        $apt2 += 0.000035 * sin((M_PI / 180) * (239.56 + 25.513099 * $k));
        $apt2 += 0.000023 * sin((M_PI / 180) * (331.55 + 3.592518 * $k));
        $tnm = $pt + $apt1 + $apt2;
        return $tnm;
    }
    /**
     * 求算以含冬至中氣為陰曆11月開始的連續16個朔望月
     * @param int $yy 年份
     * @return array
     */
    private function GetSMsinceWinterSolstice($yy) {
        $yy = intval($yy);
        
        $dj = $this->GetAdjustedJQ($yy - 1, 18, 5); //求出指定年冬至開始之節氣JD值,以前一年的值代入
        //轉移春分前之節氣至jdzq變數中，以重整index
        $jdws = $dj[19]; //此為冬至中氣
        
        $jdnm = array();
        $spcjd = $this->Jdays($yy - 1, 11, 0, 0); //求年初前兩個月附近的新月點(即前一年的11月初)
        $kn = $this->MeanNewMoon($spcjd); //求得自2000年1月起第kn個平均朔望日及其JD值
        for ($i = 0; $i <= 19; $i++) { //求出連續20個朔望月
            $k = $kn + $i;
            $tjd[$i] = $this->TrueNewMoon($k) + $this->TZ / 24; //以k值代入求瞬時朔望日,因中國比格林威治先行8小時，加1/3天
            //下式為修正dynamical time to Universal time
            $tjd[$i] = $tjd[$i] - $this->DeltaT($yy, $i - 1) / 1440; //1為1月，0為前一年12月，-1為前一年11月(當i=0時，i-1=-1，代表前一年11月)
        }
        for ($j = 0; $j <= 18; $j++) {
            if (floor($tjd[$j] + 0.5) > floor($jdws + 0.5)) {
                break;
            } //已超過冬至中氣(比較日期法)
        }
        $jj = $j; //取此時的索引值
        for ($k = 0; $k <= 15; $k++) {
            $jdnm[$k] = $tjd[$jj - 1 + $k]; //重排索引，使含冬至朔望月的索引為0
        }
        return $jdnm;
    }
    /**
     * 以比較日期法求算冬月及其餘各月名稱代碼，包含閏月，冬月為0，臘月為1，正月為2，餘類推。閏月多加0.5
     * @param int $yy
     */
    private function GetZQandSMandLunarMonthCode($yy) {
        $yy = intval($yy);
        
        $mc = array();
        $jdzq = $this->GetZQsinceWinterSolstice($yy); //取得以前一年冬至為起點之連續17個中氣
        $jdnm = $this->GetSMsinceWinterSolstice($yy); //求出以含冬至中氣為陰曆11月(冬月)開始的連續16個朔望月的新月點
        $yz = 0; //設定旗標，0表示未遇到閏月，1表示已遇到閏月
        $mc[0] = 0;
        if (floor($jdzq[12] + 0.5) >= floor($jdnm[13] + 0.5)) { //若第13個中氣jdzq(12)大於或等於第14個新月jdnm(13)
            for ($i = 1; $i <= 14; $i++) { //表示此兩個冬至之間的11個中氣要放到12個朔望月中，
                //至少有一個朔望月不含中氣，第一個不含中氣的月即為閏月
                //若陰曆臘月起始日大於冬至中氣日，且陰曆正月起始日小於或等於大寒中氣日，則此月為閏月，其餘同理
                if (floor(($jdnm[$i] + 0.5) > floor($jdzq[$i - 1 - $yz] + 0.5) && floor($jdnm[$i + 1] + 0.5) <= floor($jdzq[$i - $yz] + 0.5))) {
                    $mc[$i] = $i - 0.5;
                    $yz = 1; //標示遇到閏月
                } else {
                    $mc[$i] = $i - $yz; //遇到閏月開始，每個月號要減1
                }
            }
        } else { //否則表示兩個連續冬至之間只有11個整月，故無閏月
            for ($i = 1; $i <= 12; $i++) { //直接賦予這12個月月代碼
                $mc[$i] = $i;
            }
            for ($i = 13; $i <= 14; $i++) { //處理次一置月年的11月與12月，亦有可能含閏月
                //若次一陰曆臘月起始日大於附近的冬至中氣日，且陰曆正月起始日小於或等於大寒中氣日，則此月為閏月，次一正月同理。
                if (floor(($jdnm[$i] + 0.5) > floor($jdzq[$i - 1 - $yz] + 0.5) && floor($jdnm[$i + 1] + 0.5) <= floor($jdzq[$i - $yz] + 0.5))) {
                    $mc[$i] = $i - 0.5;
                    $yz = 1; //標示遇到閏月
                } else {
                    $mc[$i] = $i - $yz; //遇到閏月開始，每個月號要減1
                }
            }
        }
        return $mc;
    }
    /**
     * 将农历时间转换成公历时间
     * @param int $yy
     * @param int $mm
     * @param int $dd
     * @param boolean $ry 是否闰月
     * @return false/array(年,月,日)
     */
    public function Lunar2Solar($yy, $mm, $dd, $ry) { //此為將陰曆日期轉換為陽曆日期的主程式
        $yy = intval($yy);
        $mm = intval($mm);
        $dd = intval($dd);
        $ry = boolval($ry);
        
        //限定範圍
        if ($yy < -7000 || $yy > 7000) { //超出計算能力
            $this->logs(0);
            return false;
        }
        if ($yy < -1000 || $yy > 3000) { //適用於西元-1000年至西元3000年,超出此範圍誤差較大
            $this->logs(1);
            return false;
        }
        $sjd = $this->GetSMsinceWinterSolstice($yy); //求出以含冬至中氣為陰曆11月(冬月)開始的連續16個朔望月的新月點
        $mc = $this->GetZQandSMandLunarMonthCode($yy);
        $runyue = 0; //若閏月旗標為0代表無閏月
        for ($j = 1; $j <= 14; $j++) { //確認指定年前一年11月開始各月是否閏月
            if ($mc[$j] - floor($mc[$j]) > 0) { //若是，則將此閏月代碼放入閏月旗標內
                $runyue = floor($mc[$j] + 0.5);
                //runyue=0對應陰曆11月,1對應陰曆12月，2對應陰曆隔年1月，依此類推。
                break;
            }
        }
        $mx = $mm + 2; //11月對應到1，12月對應到2，1月對應到3，2月對應到4，依此類推
        //求算陰曆各月之大小，大月30天，小月29天
        for ($i = 0; $i <= 14; $i++) {
            $nofd[$i] = floor($sjd[$i + 1] + 0.5) - floor($sjd[$i] + 0.5); //每月天數,加0.5是因JD以正午起算
        }
        $er = 0; //若輸入值有錯誤，er值將被設定為1
        if ($mx >= 3 && $mx <= 14) { //輸入月份必須在1-12月之內
            if ($dd >= 1 && $dd <= 30) { //輸入日期必須在1-30日之內
                if ($ry == true) { //若有勾選閏月
                    if ($runyue < 3) { //而旗標非閏月或非本年閏月，則表示此年不含閏月
                        //runyue=0代表無閏月,=1代表閏月為前一年的11月,=2代表閏月為前一年的12月
                        $er = 1;
                        $this->logs(7); //此年非閏年
                    } else { //若本年內有閏月
                        if ($runyue != $mx) { //但不為輸入的月份
                            $er = 1; //則此輸入的月份非閏月
                            $this->logs(8); //此月非閏月
                        } else { //若輸入的月份即為閏月
                            if ($dd <= $nofd[$mx]) { //若輸入的日期不大於當月的天數
                                $jdx = $sjd[$mx] + $dd - 1; //則將當月之前的JD值加上日期之前的天數
                            } else { //日期超出範圍
                                $er = 1;
                                $this->logs(4);
                            }
                        }
                    }
                } else { //若沒有勾選閏月則
                    if ($runyue == 0) { //若旗標非閏月，則表示此年不含閏月(包括前一年的11月起之月份)
                        if ($dd <= $nofd[$mx - 1]) { //若輸入的日期不大於當月的天數
                            $jdx = $sjd[$mx - 1] + $dd - 1; //則將當月之前的JD值加上日期之前的天數
                        } else { //日期超出範圍
                            $er = 1;
                            $this->logs(4);
                        }
                    } else { //若旗標為本年有閏月(包括前一年的11月起之月份)
                        //公式nofd(mx - (mx > runyue) - 1)的用意為:若指定月大於閏月，則索引用mx，否則索引用mx-1
                        if ($dd <= $nofd[$mx + ($mx > $runyue) - 1]) { //若輸入的日期不大於當月的天數
                            $jdx = $sjd[$mx + ($mx > $runyue) - 1] + $dd - 1; //則將當月之前的JD值加上日期之前的天數
                        } else { //日期超出範圍
                            $er = 1;
                            $this->logs(4);
                        }
                    }
                }
                if ($er == 0) { //若沒有錯誤，則印出陽曆年月日
                    
                }
            } else { //日期錯誤
                $er = 1;
                $this->logs(5);
            }
        } else { //月份錯誤
            $er = 1;
            $this->logs(6);
        }
        return $er ? false : array_slice($this->Jtime($jdx), 0, 3);
    }
    /**
     * 将公历时间转换成农历时间
     * @param int $yy
     * @param int $mm
     * @param int $dd
     * @return false/array(年,月,日,是否闰月)
     */
    public function Solar2Lunar($yy, $mm, $dd) {
        $yy = intval($yy);
        $mm = intval($mm);
        $dd = intval($dd);
        
        $flag = 0;
        
        //限定範圍
        if ($yy < -7000 || $yy > 7000) { //超出計算能力
            $this->logs(0);
            return false;
        }
        if ($yy < -1000 || $yy > 3000) { //適用於西元-1000年至西元3000年,超出此範圍誤差較大
            $this->logs(1);
            return false;
        }
        //驗證輸入日期的正確性,若不正確則跳離
        if ($this->ValidDate($yy, $mm, $dd) === false) {
            return false;
        }
        $sjd = $this->GetSMsinceWinterSolstice($yy); //求出以含冬至中氣為陰曆11月(冬月)開始的連續16個朔望月的新月點
        $mc = $this->GetZQandSMandLunarMonthCode($yy);
        $jdx = $this->Jdays($yy, $mm, $dd, 12); //求出指定年月日之JD值
        if (floor($jdx) < floor($sjd[0] + 0.5)) {
            $flag = 1;
            $sjd = $this->GetSMsinceWinterSolstice($yy - 1); //求出以含冬至中氣為陰曆11月(冬月)開始的連續16個朔望月的新月點
            $mc = $this->GetZQandSMandLunarMonthCode($yy - 1);
        }
        for ($i = 0; $i <= 14; $i++) {
            //下面的指令中加0.5是為了改為從0時算起而不從正午算起
            if (floor($jdx) >= floor($sjd[$i] + 0.5) && floor($jdx) < floor($sjd[$i + 1] + 0.5)) {
                $mi = $i;
                break;
            }
        }
        $dz = floor($jdx) - floor($sjd[$mi] + 0.5) + 1; //此處加1是因為每月初一從1開始而非從0開始
        if ($mc[$mi] < 2 || $flag == 1) {
            $yi = $yy - 1;
        } else {
            $yi = $yy;
        } //因mc(mi)=0對應到前一年陰曆11月，mc(mi)=1對應到前一年陰曆12月
        //mc(mi)=2對應到本年1月，依此類推
        if (($mc[$mi] - floor($mc[$mi])) * 2 + 1 == 1) {
            $ry = false;
        } else {
            $ry = true;
        }
        $mis = (floor($mc[$mi] + 10) % 12) + 1; //對應到月份
        
        return array($yi, $mis, $dz, $ry);
    }
    /**
     * 计算公历的某天是星期几(PHP中的date方法,此处演示儒略日历的转换作用)
     * @param int $yy
     * @param int $mm
     * @param int $dd
     * @return false/int wkd[i]
     */
    public function GetWeek($yy, $mm, $dd) {
        $yy = intval($yy);
        $mm = intval($mm);
        $dd = intval($dd);
        
        $spcjd = $this->Jdays($yy, $mm, $dd, 12, 0, 0);
        if ($spcjd === false) {
            return false;
        }
        
        return (((floor($spcjd + 1) % 7)) + 7) % 7; //模數(或餘數)為0代表星期日(因为西元前4713年1月1日12時为星期一).spcjd加1是因起始日為星期一
    }
    /**
     * 获取公历某个月有多少天
     * @param int $yy
     * @param int $mm
     * @return number
     */
    public function GetSolarDays($yy, $mm){
        $yy = intval($yy);
        $mm = intval($mm);
        
        if ($mm < 1 || $mm > 12) { //月份超出範圍
            $this->logs(13);
            return 0;
        }
        if ($yy == 1582 && $mm == 10) { //这年这个月的5到14日不存在,所以1582年10月只有21天
            return 21;
        }
        $ndf1 = -($yy % 4 == 0); //可被四整除
        $ndf2 = (($yy % 400 == 0) - ($yy % 100 == 0)) && ($yy > 1582);
        $ndf = $ndf1 + $ndf2;
        return 30 + ((abs($mm - 7.5) + 0.5) % 2) - ($mm == 2) * (2 + $ndf);
    }
    /**
     * 获取农历某个月有多少天
     * @param int $yy
     * @param int $mm
     * @param bool $ry 是否闰月
     * @return false/number
     */
    public function GetLunarDays($yy, $mm, $ry){
        $yy = intval($yy);
        $mm = intval($mm);
        $ry = boolval($ry);
        
        //限定範圍
        if ($yy < -7000 || $yy > 7000) { //超出計算能力
            $this->logs(0);
            return false;
        }
        if ($yy < -1000 || $yy > 3000) { //適用於西元-1000年至西元3000年,超出此範圍誤差較大
            $this->logs(1);
            return false;
        }
        $sjd = $this->GetSMsinceWinterSolstice($yy); //求出以含冬至中氣為陰曆11月(冬月)開始的連續16個朔望月的新月點
        $mc = $this->GetZQandSMandLunarMonthCode($yy);
        $runyue = 0; //若閏月旗標為0代表無閏月
        for ($j = 1; $j <= 14; $j++) { //確認指定年前一年11月開始各月是否閏月
            if ($mc[$j] - floor($mc[$j]) > 0) { //若是，則將此閏月代碼放入閏月旗標內
                $runyue = floor($mc[$j] + 0.5);
                //$runyue=0對應陰曆11月,1對應陰曆12月，2對應陰曆隔年1月，依此類推。
                break;
            }
        }
        $mx = $mm + 2; //11月對應到1，12月對應到2，1月對應到3，2月對應到4，依此類推
        //求算陰曆各月之大小，大月30天，小月29天
        for ($i = 0; $i <= 14; $i++) {
            $nofd[$i] = floor($sjd[$i + 1] + 0.5) - floor($sjd[$i] + 0.5); //每月天數,加0.5是因JD以正午起算
        }
        $er = 0; //若輸入值有錯誤，er值將被設定為1
        if ($mx >= 3 && $mx <= 14) { //輸入月份必須在1-12月之內
            if ($ry == true) { //若有勾選閏月
                if ($runyue < 3) { //而旗標非閏月或非本年閏月，則表示此年不含閏月
                    //$runyue=0代表無閏月,=1代表閏月為前一年的11月,=2代表閏月為前一年的12月
                    $er = 1;
                    $this->logs(7); //此年非閏年
                } else { //若本年內有閏月
                    if ($runyue != $mx) { //但不為輸入的月份
                        $er = 1; //則此輸入的月份非閏月
                        $this->logs(8); //此月非閏月
                    } else { //若輸入的月份即為閏月
                        $dd = $nofd[$mx]; //當月的天數
                    }
                }
            } else { //若沒有勾選閏月則
                if ($runyue == 0) { //若旗標非閏月，則表示此年不含閏月(包括前一年的11月起之月份)
                    $dd = $nofd[$mx - 1]; //當月的天數
                } else { //若旗標為本年有閏月(包括前一年的11月起之月份)
                    //公式nofd($mx - ($mx > $runyue) - 1)的用意為:若指定月大於閏月，則索引用mx，否則索引用mx-1
                    $dd = $nofd[$mx + ($mx > $runyue) - 1]; //當月的天數
                }
            }
        } else { //月份錯誤
            $er = 1;
            $this->logs(6);
        }
        return $er ? false : $dd;
    }
    /**
     * 获取农历某年的闰月,0为无闰月
     * @param int $yy
     * @return number
     */
    public function GetRunyue($yy){
        $yy = intval($yy);
        
        $mc = $this->GetZQandSMandLunarMonthCode($yy);
        $runyue = 0; //若閏月旗標為0代表無閏月
        for ($j = 1; $j <= 14; $j++) { //確認指定年前一年11月開始各月是否閏月
            if ($mc[$j] - floor($mc[$j]) > 0) { //若是，則將此閏月代碼放入閏月旗標內
                $runyue = floor($mc[$j] + 0.5);
                //$runyue=0對應陰曆11月,1對應陰曆12月，2對應陰曆隔年1月，依此類推。
                break;
            }
        }
        return max(0, $runyue-2);
    }
    /**
     * 根据公历年月日精确计算星座下标
     * @param int $yy
     * @param int $mm
     * @param int $dd
     * @param int hh 时间(0-23)
     * @param int mt 分钟数(0-59)
     * @param int ss 秒数(0-59)
     * @return int|false $this->cxz[xz]
     */
    public function GetXZ($yy, $mm, $dd, $hh, $mt = 0, $ss = 0) {
        $yy = intval($yy);
        $mm = intval($mm);
        $dd = intval($dd);
        $hh = intval($hh);
        $mt = intval($mt);
        $ss = intval($ss);
        
        if ($this->ValidDate($yy, $mm, $dd) === false) {
            return false;
        }
        
        $spcjd = $this->Jdays($yy, $mm, $dd, $hh, $mt, $ss); //special jd
        if ($spcjd === false) {
            return false;
        }
        
        //顯示星座,根据公历的中气判断
        $zr = $this->GetZQsinceWinterSolstice($yy);
        if ($spcjd < $zr[0]) {
            $zr = $this->GetZQsinceWinterSolstice($yy - 1);
        } //若小於雨水，則歸前一年
        for ($i = 0; $i <= 13; $i++) { //先找到指定時刻前後的中氣月首
            if ($spcjd < $zr[$i]) {
                $xz = ($i + 12 - 1) % 12;
                break;
            } //即為指定時刻所在的節氣月首JD值
        }
        return $xz;
    }
    /**
     * 求出含某公历年立春點開始的24节气的儒略日历时间
     * @param int $yy
     * @return array $this->jq[(i+21)%24]
     */
    public function Get24JQ($yy) {
        $yy = intval($yy);
        
        $yea = $yy - 1;
        $sjdjq = $this->GetAdjustedJQ($yea, 21, 3); //求出含指定年立春開始之3個節氣JD值,以前一年的年值代入
        //轉移春分前之立春至驚蟄之節氣至jdpjq變數中，以重整index
        $jdpjq[0] = $sjdjq[22]; //此為立春
        $jdpjq[1] = $sjdjq[23]; //此為雨水
        $jdpjq[2] = $sjdjq[24]; //此為驚蟄
        $yea = $yy;
        $sjdjq = $this->GetAdjustedJQ($yea, 0, 21); //求出指定年節氣之JD值,從春分開始，到大寒
        //轉移春分至大寒之節氣至jdpjq變數中，以重整index
        for ($i = 1; $i <= 21; $i++) {
            $jdpjq[$i + 2] = $sjdjq[$i];
        }
        return $jdpjq;
    }
    /**
     * 四柱計算,分早子时晚子时,传公历
     * @param int $yy
     * @param int $mm [1-12]
     * @param int $dd
     * @param int hh
     * @param int mt 分钟数(0-59),在跨节的时辰上会需要,有的排盘忽略跨节
     * @param int ss 秒数(0-59)
     * @return false/array(天干, 地支)
     */
    public function GetGZ($yy, $mm, $dd, $hh, $mt = 0, $ss = 0) {
        $yy = floatval($yy);
        $mm = floatval($mm);
        $dd = floatval($dd);
        $hh = floatval($hh);
        $mt = floatval($mt);
        $ss = floatval($ss);
        
		if($mt + $ss == 0){ //避免整点模糊
			$ss = 10;
		}
		
        if ($this->ValidDate($yy, $mm, $dd) === false) {
            return false;
        }
        
        $spcjd = $this->Jdays($yy, $mm, $dd, $hh, $mt, $ss);
        if ($spcjd === false) {
            return false;
        }
        //比較求算節氣年ty,求出年干支
        $jr = array();
        $ty = $yy;
        $jr = $this->GetPureJQsinceSpring($yy); //取得自立春開始的非中氣之24節氣
        if ($spcjd < $jr[0]) { //jr[0]為立春，約在2月5日前後，
            $ty = $yy - 1; //若小於jr[0],則屬於前一個節氣年
            $jr = $this->GetPureJQsinceSpring($ty); //取得自立春開始的不含中氣之12節氣
        }
        $tg = array();
        $dz = array();
        $ygz = (($ty + 4712 + 24) % 60 + 60) % 60;
        $tg[0] = $ygz % 10; //年干
        $dz[0] = $ygz % 12; //年支
        //比較求算節氣月,求出月干支
        for ($j = 0; $j <= 13; $j++) {
            if ($jr[$j] >= $spcjd) {
                $tm = $j - 1;
                break;
            } //已超過指定時刻，故應取前一個節氣
        }
        $tmm = (($ty + 4712) * 12 + ($tm) + 60) % 60;
        $mgz = ($tmm + 50) % 60;
        $tg[1] = $mgz % 10; //月干
        $dz[1] = $mgz % 12; //月支
        //計算日柱之干支
        $jda = $spcjd + 0.5; //加0.5是將起始點從正午改為從0點開始
        $thes = (($jda - floor($jda)) * 86400) + 3600; //將jd的小數部份化為秒，並加上起始點前移的一小時(3600秒)，取其整數值
        $dayjd = floor($jda) + $thes / 86400; //將秒數化為日數，加回到jd的整數部份
        $dgz = (floor($dayjd + 49) % 60 + 60) % 60;
        $tg[2] = $dgz % 10; //日干
        $dz[2] = $dgz % 12; //日支
        if ($this->zwz && ($hh >= 23)) { //区分早晚子时,日柱前移一柱
            $tg[2] = ($tg[2] + 10 - 1) % 10;
            $dz[2] = ($dz[2] + 12 - 1) % 12;
        }
        //計算時柱之干支
        $dh = $dayjd * 12;
        $hgz = (floor($dh + 48) % 60 + 60) % 60;
        $tg[3] = $hgz % 10; //時干
        $dz[3] = $hgz % 12; //時支
        
        return array($tg, $dz);
    }
    /**
     * 根据年干支计算所有合法的月干支
     * @param int $ygz 年柱干支代码
     * @return array 月柱干支代码列表
     */
    public function MGZ($ygz) {
        $mgz = array();
        
        //$ygz = array_search($ygz, $this->gz);
        
        $nv = 2 + 12 * ($ygz % 10);
        for ($i = 0; $i <= 11; $i++) {
            $pv = ($i + $nv) % 60;
            $mgz[$pv] = $this->gz[$pv];
        }
        return $mgz;
    }
    /**
     * 根据日干支计算所有合法的时干支
     * @param int $dgz 日柱干支代码
     * @return array 时柱干支代码列表
     */
    public function HGZ($dgz) {
        $hgz = array();
        
        //$dgz = array_search($dgz, $this->gz);
        
        $nv = 12 * ($dgz % 10);
        for ($i = 0; $i <= 11; $i++) {
            $pv = ($i + $nv) % 60;
            $hgz[$pv] = $this->gz[$pv];
        }
        return $hgz;
    }
    /**
     * 根据一柱天干地支代码计算该柱的六十甲子代码
     * @param int $tg 天干代码
     * @param int $dz 地支代码
     * @return false/int 干支代码
     */
    public function GZ($tg, $dz){
        $tg = intval($tg);
        $dz = intval($dz);
        
        if($tg < 0 || $tg > 59){
            $this->logs(3,11);
            return false;
        }
        
        if($dz < 0 || $dz > 59){
            $this->logs(3,12);
            return false;
        }
        
        if(($tg % 2) != ($dz % 2)){ //偶数对偶数,奇数对奇数才能组成一柱
            $this->logs(3,13);
            return false;
        }
        return ((10 + $tg - $dz) % 10) / 2 * 12 + $dz;
    }
    /**
     * 根据八字干支查找对应的公历日期(GanZhi To GongLi),这里没有考虑早晚子时
     * @param int ygz
     * @param int mgz
     * @param int dgz
     * @param int hgz
     * @param int yeai 起始年 year initial
     * @param int mx 查找多少个甲子
     */
    public function gz2gl($ygz, $mgz, $dgz, $hgz, $yeai, $mx) {
        $ygz = intval($ygz);
        $mgz = intval($mgz);
        $dgz = intval($dgz);
        $hgz = intval($hgz);
        $yeai = intval($yeai);
        $mx = intval($mx);
        
        if ($ygz < 0 || $ygz >= 60) { //年干支非六十甲子
            $this->logs(3,0);
            return false;
        }
        if ($mgz < 0 || $mgz >= 60) { //月干支非六十甲子
            $this->logs(3,1);
            return false;
        }
        if ($dgz < 0 || $dgz >= 60) { //日干支非六十甲子
            $this->logs(3,2);
            return false;
        }
        if ($hgz < 0 || $hgz >= 60) { //时干支非六十甲子
            $this->logs(3,3);
            return false;
        }
        
        if (! key_exists($mgz, $this->MGZ($ygz))) { //对应的月干支不存在
            $this->logs(2,0);
            return false;
        }
        if (! key_exists($hgz, $this->HGZ($dgz))) { //对应的时干支不存在
            $this->logs(2,1);
            return false;
        }
        $yeaf = $yeai + $mx * 60;
        
        if ($yeai < -1000 || $yeaf > 3000) { //說明大誤差區域:適用於西元-1000年至西元3000年,超出此範圍誤差較大
            $this->logs(1);
            return false;
        }
        
        $ifs = array(); //initial-final 返回一个含起止时间的数组
        
        for ($m = 0; $m <= $mx - 1; $m++) {
            $yea = $yeai + $m * 60;
            
            //將年月干支對應到指定年的節氣月起始時刻
            $syc = ($yea + 56) % 60; //已知公元0年为庚申年,庚申的六十甲子代码为56,这里求得yea的六十甲子代码syc
            $asyc = ($ygz + 60 - $syc) % 60; //年干支代码相对yea干支代码偏移了多少
            $iy = $yea + $asyc; //加上偏移即得一个ygz年
            
            $jdpjq = $this->GetPureJQsinceSpring($iy); //该年的立春开始的节
            $mgzo = ($mgz + 60 - 2) % 12; //已知干支代碼,要求干支名,只需將干支代碼除以10,所得的餘數即為天干的代碼;將干支代碼除以12,所得的餘數即為地支的代碼.这里求得mgz在第几个月
            $ijd = $jdpjq[$mgzo]; // 節氣月頭JD initial jd
            $fjd = $jdpjq[$mgzo + 1]; // 節氣月尾JD final jd
            
            $sdc = (floor($ijd) + 49) % 60; // 節氣月頭的日干支代碼,儒略日历时间0日为癸丑日,六十甲子代码为49
            $asdc = ($dgz + 60 - $sdc) % 60; // 生日相對於節氣月頭的日數
            $idd = floor($ijd + $asdc); // 生日JD值(未加上時辰)
            $ihh = $hgz % 12; // 時辰代碼
            $id = $idd + ($ihh * 2 - 13) / 24;
            $fd = $idd + ($ihh * 2 - 11) / 24;
            
            if ($fd < $ijd || $id > $fjd) { //此八字在此60年中不存在
                
            } else {
                if ($id > $ijd && $fd < $fjd) { //没有跨节
                    $ids = $id;
                    $fds = $fd;
                }
                if ($id < $ijd && $fd > $ijd) { //同一个时辰跨越了节:在節氣月頭,只包含時辰後段
                    $ids = $ijd;
                    $fds = $fd;
                }
                if ($id < $fjd && $fd > $fjd) { //同一个时辰跨越了节:在節氣月尾,只包含時辰前段
                    $ids = $id;
                    $fds = $fjd;
                }
                $ifs[] = [$this->Jtime($ids), $this->Jtime($fds)]; //儒略日历时间转成公历时间
            }
        }
        return $ifs;
    }
    /**
     * 根据公历年月日计算命盘信息 fate:命运 map:图示
     * @param int $xb 性别0男1女
     * @param int $yy 年份.默认传的是$this->TZ对应的时间
     * @param int $mm 月份(1-12)
     * @param int $dd 日期(1-31)
     * @param int $hh 时间(0-23)
     * @param int $mt 分钟(0-59),在跨节的时辰上会需要,有的排盘忽略了跨节,不需要考虑跨节则请把时间置为对应时辰的初始值
     * @param int $ss 秒数(0-59),在跨节的时辰上会需要,有的排盘忽略了跨节
     * @param float $j 所在经度(角度表示)用于计算真太阳时,不传则用标准时间排盘
     * @return false/array
     */
    public function fatemaps($xb, $yy, $mm, $dd, $hh, $mt = 0, $ss = 0, $j = null) {
        $xb = intval($xb) ? 1 : 0; //确保准确
        $yy = intval($yy);
        $mm = intval($mm);
        $dd = intval($dd);
        $hh = intval($hh);
        $mt = intval($mt);
        $ss = intval($ss);

        //說明大誤差區域
        if ($yy < -1000 || $yy > 3000) { //適用於西元-1000年至西元3000年,超出此範圍誤差較大
            $this->logs(1);
            return false;
        }
        
        $spcjd = $this->Jdays($yy, $mm, $dd, $hh, $mt, $ss); //special jd,这里依然是标准时间,即this.J处的平太阳时
        if ($spcjd === false) {
            return false;
        }
        $rt = array(); //要返回的数组 return
        
        if(is_null($j) === false){ //需要转地方真太阳时
            $rt['pty'] = $spcjd + (floatval($j) - $this->J) * 4 * 60 / 86400; //计算地方平太阳时,每经度时差4分钟
            $rt['pty'] = $this->Jtime($rt['pty']); //地方平太阳时
            
            $spcjd = $this->zty($spcjd, $j); //采用真太阳时排盘,这里有点疑问: 对应的廿四节气的计算是否也要转为真太阳时呢?
            $rt['zty'] = $this->Jtime($spcjd); //地方真太阳时
        }
        
        [$yy, $mm, $dd, $hh, $mt, $ss] = $this->Jtime($spcjd); //假设hh传了>24的数字,此处修正
        
        $ta = 365.24244475; //一個廻歸年的天數
        
        
        $nwx = [0, 0, 0, 0, 0]; //五行数量 number of WuXing 这里不计算藏干里的
        $nyy = [0, 0]; //阴阳数量 number of YinYang 这里不计算藏干里的
        
        $szs = [1,6,10,9,10,9,7,0,4,3]; //日干對地支爲"子"者所對應的運程代碼
        
        $ty = $yy;
        $jr = $this->GetPureJQsinceSpring($ty); //取得自立春開始的非中氣之24節氣
        if ($spcjd < $jr[0]) { //jr[0]為立春，約在2月5日前後，
            $ty = $yy - 1; //若小於jr[0],則屬於前一個節氣年
            $jr = $this->GetPureJQsinceSpring($ty); //取得自立春開始的非中氣之12節氣
        }
        
        [$tg, $dz] = $this->GetGZ($yy, $mm, $dd, $hh, $mt, $ss);
        
        //計算年月日時辰等四柱干支的陰陽屬性和個數及五行屬性和個數
        $yytg = array(); //YinYang TianGan
        $yydz = array(); //YinYang DiZhi
        $ewxtg = array(); //各天干对应的五行
        $ewxdz = array(); //各地支对应的五行
        for ($k = 0; $k <= 3; $k++) { //yytg:八字各柱天干之陰陽屬性,yydz:八字各柱地支之陰陽屬性，nyy[0]為陽之總數，nyy[1]為陰之總數
            $yytg[$k] = $tg[$k] % 2;
            $nyy[$yytg[$k]] = $nyy[$yytg[$k]] + 1; //求天干的陰陽並計算陰陽總數
            
            $yydz[$k] = $dz[$k] % 2;
            $nyy[$yydz[$k]] = $nyy[$yydz[$k]] + 1; //求地支的陰陽並計算陰陽總數
            
            $ewxtg[$k] = $this->wxtg[$tg[$k]];
            $nwx[$ewxtg[$k]] = $nwx[$ewxtg[$k]] + 1; //wxtg為天干之五行屬性
            
            $ewxdz[$k] = $this->wxdz[$dz[$k]];
            $nwx[$ewxdz[$k]] = $nwx[$ewxdz[$k]] + 1; //wxdz為地支之五行屬性
        }
        
        $rt['nyy'] = $nyy; //阴阳数量
        $rt['nwx'] = $nwx; //五行数量
        
        $rt['yytg'] = $yytg; //各天干对应的阴阳
        $rt['yydz'] = $yydz; //各地支对应的阴阳
        
        $rt['ewxtg'] = $ewxtg; //各天干对应的五行
        $rt['ewxdz'] = $ewxdz; //各地支对应的五行
        
        //日主與地支藏干決定十神
        $bzcg = array(); //各地支的藏干
        $wxcg = array(); //各地支的藏干对应的五行
        $yycg = array(); //各地支的藏干对应的阴阳
        $bctg = array(); //各地支的藏干对应的文字
        for ($i = 0; $i <= 3; $i++) { //0,1,2,3等四個
            $wxcg[$i] = array();
            $yycg[$i] = array();
            for ($j = 0; $j <= 2; $j++) { //0,1,2等三個
                $nzcg = $this->zcg[$dz[$i]][$j]; //取得藏干表中的藏干代碼,zcg為一 4X3 之array
                if ($nzcg >= 0) { //若存在則取出(若為-1，則代表空白)
                    $bctg[3 * $i + $j] = $this->ctg[$nzcg]; //暫存其干支文字
                    $bzcg[3 * $i + $j] = $this->sss[$this->dgs[$nzcg][$tg[2]]]; //暫存其所對應之十神文字
                    
                    $wxcg[$i][$j] = $this->wxtg[$nzcg]; //其五行屬性
                    $yycg[$i][$j] = $nzcg % 2; //其陰陽屬性
                } else {
                    $bctg[3 * $i + $j] = ""; //若nzcg為-1，則代表空白，設定藏干文字變數為空白
                    $bzcg[3 * $i + $j] = ""; //若nzcg為-1，則代表空白，設定十神文字變數為空白
                }
            }
        }
        
        $rt['bctg'] = $bctg;
        $rt['bzcg'] = $bzcg;
        $rt['wxcg'] = $wxcg;
        $rt['yycg'] = $yycg;
        
        //求算起運時刻
        for ($i = 0; $i <= 14; $i++) { //先找到指定時刻前後的節氣月首
            if ($jr[$i] > $spcjd) {
                $ord = $i - 1;
                break;
            } //ord即為指定時刻所在的節氣月首JD值
        }
        $xf = $spcjd - $jr[$ord]; //xf代表節氣月的前段長，單位為日，以指定時刻為分界點
        $yf = $jr[$ord + 1] - $spcjd; //yf代表節氣月的後段長
        if ((($xb == 0) && ($yytg[0] == 0)) || (($xb == 1) && ($yytg[0] == 1))) {
            $zf = $ta * 10 * ($yf / ($yf + $xf)); //zf為指定日開始到起運日之間的總日數(精確法)
            //$zf = 360 * 10 * ($yf / 30); //zf為指定日開始到起運日之間的總日數(粗略法）三天折合一年,一天折合四个月,一个时辰折合十天,一个小时折合五天,反推得到一年按360天算,一个月按30天算
            $forward = 0; //陽年男或陰年女，其大運是順推的
        } else {
            $zf = $ta * 10 * ($xf / ($yf + $xf)); //陰年男或陽年女,其大運是逆推的
            //$zf = 360 * 10 * ($xf / 30); //(粗略法)
            $forward = 1;
        }
        $qyt = $spcjd + $zf; //起運時刻為指定時刻加上推算出的10年內比例值zf
        $jt = $this->Jtime($qyt); //將起運時刻的JD值轉換為年月日時分秒
        $qyy = $jt[0]; //起運年(公历)
        
        $rt['qyy'] = $qyy; //起運年
        $rt['qyy_desc'] = "出生后" . intval($zf / $ta) . "年" . intval($zf % $ta / ($ta / 12)) . "个月" . intval($zf % $ta % ($ta / 12)) . "天起运"; //一年按ta天算,一个月按ta/12天算
        
        //求算起運年(指節氣年,农历)
        $qjr = $this->GetPureJQsinceSpring($qyy); //取得自立春開始的非中氣之12節氣
        if ($qyt >= $qjr[0]) { //qjr[0]為立春，約在2月5日前後，
            $jqyy = $qyy;
        } else {
            $jqyy = $qyy - 1; //若小於jr[0],則屬於前一個節氣年
        }
        
        //求算起運年及其後第五年的年干支及起運歲
        $jtd = (($jqyy + 4712 + 24) % 10 + 10) % 10;
        $jtd = $this->ctg[(($jqyy + 4712 + 24) % 10 + 10) % 10] . " " . $this->ctg[(($jqyy + 4712 + 24 + 5) % 10 + 10) % 10];
        $rt['qyy_desc2'] = "每逢 " . $jtd . " 年" . $jt[1] . "月" . $jt[2] . "日交大運"; //顯示每十年為一階段之起運時刻，分兩個五年以年天干和陽曆日期表示
        $qage = $jqyy - $ty; //起運年減去出生年再加一即為起運之歲數,從懷胎算起,出生即算一歲
        
        $rt['dy'] = array(); //大运
        
        //下面的回圈計算起迄歲，大運干支(及其對應的十神)，衰旺吉凶
        $zqage = array(); //起始歲數
        $zboz = array(); //末端歲數
        $zfman = array(); //大運月干代码
        $zfmbn = array(); //大運月支代码
        $zfma = array(); //大運月干文字
        $zfmb = array(); //大運月支文字
        $nzs = array(); //大运对应的十二长生
        $mgz = ((10 + $tg[1] - $dz[1]) % 10) / 2 * 12 + $dz[1]; //这里是根据天干地支代码计算月柱的六十甲子代码
        for ($k = 0; $k <= 8; $k++) { //求各階段的起迄歲數及該階段的大運
            if (empty($rt['dy'][$k])) {
                $rt['dy'][$k] = array();
            }
            //求起迄歲
            $rt['dy'][$k]['zqage'] = $zqage[$k] = $qage + 1 + $k * 10; //求各階段的起始歲數
            $rt['dy'][$k]['zboz'] = $zboz[$k] = $qage + 1 + $k * 10 + 9; //求各階段的末端歲數
            
            //排大運
            //求大運的數值表示值,以出生月份的次月干支開始順排或以出生月份的前一個月干支開始逆排
            //大運月干
            $rt['dy'][$k]['zfman'] = $zfman[$k] = ($mgz + 60 + pow(-1, $forward) * ($k + 1)) % 10; //加60是為保證在Mod之前必為正數
            //大運月支
            $rt['dy'][$k]['zfmbn'] = $zfmbn[$k] = ($mgz + 60 + pow(-1, $forward) * ($k + 1)) % 12; //加60是為保證在Mod之前必為正數
            
            $rt['dy'][$k]['zfma'] = $zfma[$k] = $this->ctg[$zfman[$k]];
            $rt['dy'][$k]['zfmb'] = $zfmb[$k] = $this->cdz[$zfmbn[$k]];
            
            //算衰旺吉凶ncs
            //szs(tg(2))爲日干對大運地支爲"子"者所對應之運程代碼
            //tg(2)爲生日天干(以整數0~11表示)之代碼
            //(-1)^tg(2)表示若日干爲陽則取加號,若日干爲陰則取减號
            //第一個大運之地支數值爲zfmbn(0)
            //下式中szs(tg(2)) + (-1) ^ tg(2) * (zfmbn(0))為決定起始運勢,(-1) ^ forward * (-1) ^ tg(2) 為決定順推或逆推,可合併簡化為次一式
            $rt['dy'][$k]['nzs'] = $nzs[$k] = (24 + $szs[$tg[2]] + pow(-1, $tg[2]) * ($zfmbn[0] + pow(-1, $forward) * $k)) % 12;
            $rt['dy'][$k]['nzsc'] = $this->czs[$nzs[$k]];
            //此處加24是爲了使Mod之前總值不爲負值
        }
        
        //求流年的數值表示值及對應的文字
        $lyean = array(); //流年天干
        $lyebn = array(); //流年地支
        $lye = array(); //流年所對應的干支文字
        for ($j = 0; $j <= 89; $j++) {
            $k = intval($j / 10); //大运
            $i = $j % 10; //流年
            if (empty($rt['dy'][$k]['ly'])) { //大运对应的流年
                $rt['dy'][$k]['ly'] = array();
            }
            if (empty($rt['dy'][$k]['ly'][$i])) {
                $rt['dy'][$k]['ly'][$i] = array();
            }
            //lyean[j]=(ygz + j + qage) % 10;
            $rt['dy'][$k]['ly'][$i]['age'] = $j + $qage + 1; //年龄(虚岁)
            $rt['dy'][$k]['ly'][$i]['year'] = $j + $qage + $ty; //流年(农历)
            $rt['dy'][$k]['ly'][$i]['lyean'] = $lyean[$j] = ($tg[0] + $j + $qage) % 10; //流年天干
            $rt['dy'][$k]['ly'][$i]['lyebn'] = $lyebn[$j] = ($dz[0] + $j + $qage) % 12; //流年地支
            $rt['dy'][$k]['ly'][$i]['lye'] = $lye[$j] = $this->ctg[$lyean[$j]] . $this->cdz[$lyebn[$j]]; //取流年所對應的干支文字
        }
        
        //顯示星座,根据公历的中气判断
        $zr = $this->GetZQsinceWinterSolstice($yy);
        if ($spcjd < $zr[0]) {
            $zr = $this->GetZQsinceWinterSolstice($yy - 1);
        } //若小於雨水，則歸前一年
        for ($i = 0; $i <= 13; $i++) { //先找到指定時刻前後的中氣月首
            if ($spcjd < $zr[$i]) {
                $xz = ($i + 12 - 1) % 12;
                break;
            } //即為指定時刻所在的節氣月首JD值
        }
        
        $rt['mz'] = $this->mz[$xb]; //命造乾坤
        $rt['xb'] = $this->xb[$xb]; //性别0男1女
        $rt['gl'] = [$yy, $mm, $dd]; //公历生日
        $rt['nl'] = $this->Solar2Lunar($yy, $mm, $dd); //农历生日
        $rt['tg'] = $tg; //八字天干数组
        $rt['dz'] = $dz; //八字地支数组
        $rt['sz'] = array(); //四柱字符
        $rt['ctg'] = array(); //天干字符
        $rt['cdz'] = array(); //地支字符
        for($i = 0; $i <= 3; $i++){
            $rt['sz'][$i] = $this->ctg[$tg[$i]] . $this->cdz[$dz[$i]];
            $rt['ctg'][$i] = $this->ctg[$tg[$i]];
            $rt['cdz'][$i] = $this->cdz[$dz[$i]];
        }
        $rt['sx'] = $this->csx[$dz[0]]; //生肖,與年地支對應
        $rt['xz'] = $this->cxz[$xz]; //星座
        $rt['cyy'] = $this->cyy[$yytg[2]]; //日干阴阳
        
        return $rt;
    }
}